<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雨中•学圃堂</title>
  
  <subtitle>纵有疾风起，人生不言弃👊 | 别再学习啦，人家都困了🥱</subtitle>
  <link href="https://coolchong.cn/atom.xml" rel="self"/>
  
  <link href="https://coolchong.cn/"/>
  <updated>2023-08-14T13:37:56.476Z</updated>
  <id>https://coolchong.cn/</id>
  
  <author>
    <name>Wenchong Lang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>致亲爱学弟的一封信</title>
    <link href="https://coolchong.cn/2023/06/28/letter2fresh/"/>
    <id>https://coolchong.cn/2023/06/28/letter2fresh/</id>
    <published>2023-06-27T18:04:54.000Z</published>
    <updated>2023-08-14T13:37:56.476Z</updated>
    
    <content type="html"><![CDATA[<p>大学四年，如梦一般，转瞬即逝。那晚无聊的盛夏本只道是寻常，却没想将成为少年日后魂牵梦萦的美好时光。虽然我的青春即将落幕，但是总有年轻的少年风华正茂，在此离别之际，学长谨以此篇书信赠予亲爱的学弟分享我的大学故事✍。</p><span id="more"></span><div id="myAudio" style="width:100%;display:flex;item-align:center;justify-content:center"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="https://music.163.com/outchain/player?type=2&id=1330348068&auto=1&height=66"></iframe></div><div class="tag-plugin quot"><p class="content" type="text">序言</p></div><p>致即将迈入大学生活的学弟：</p><p>你好，亲爱的学弟，很荣幸你能够读到我写给你的这封信😄，我总相信相遇即是缘分，现在是凌晨2:25，如今距离我大学生涯终章还有最后五个小时，明日我将启程离开这个承载了我四年痛苦而又美好回忆的母校，作为最后一个告别宿舍的“守门人”，离别之际的深夜总是充满怅惘与回忆的🥲，既然迟迟无法入睡，我想不妨在这最后的时光里，你且听我为你讲述我在天津大学四年时光中经历的酸甜苦辣…</p><p>                                                                                                                 ————2023.6.28</p><div class="tag-plugin quot"><p class="content" type="text">一·你好，天津大学</p></div><p>量思许久，思绪万千，学长的脑海中犹如走马灯般闪过诸多记忆片段，一时竟不知从何下笔讲述我的故事🤔，最终我决定从与你我的母校天津大学初相识说起。不知你和学长我是否一样，起初并不了解天津大学，只是听说天津具有两所重点学术高校且并称天津“双子星”，其中最著名的就是具有知名杰出校友周恩来的南开大学，但是另一所学校天津大学我直至高三才逐步了解。作为高中学校时的天之骄子，我自然并未将该学校放入眼中，毕竟人人都有一颗向往清北华五的梦想，但是现实总是残酷的，高考的平平发挥我并未能如愿进入当时梦寐以求的北航计算机系，最终在家长、老师、朋友的建议下选择了这所实力远大于名气的“工科高原”——天津大学🤨。作为当时同省份报考天津大学的最高分，我在浪费了20分的情况下毫无悬念地被一志愿录取进入了“智能与计算学部”，开始了我在天津大学的四年求学生涯。</p><div class="tag-plugin quot"><p class="content" type="text">二·深陷谷底的少年</p></div><p>与你们不同，学长我们并未从大一开始就在北洋园校区就读，而是很幸运的在卫津路学习一年后才转入了北洋园校区就读，作为具有百年历史底蕴的老校区，其地理位置优越，环境优美，我本以为会在这里开始我辉煌的求学生涯，却没成想大一学年仅仅是我噩梦般生活的开端😢。</p><p>作为高分进入本专业的学生，且刚刚从万人过独木桥般的高考中卷赢的胜利者，每一个少年自然都会拥有一份自傲感，自认为与众不同，拥有更强的学习能力与广泛的兴趣爱好，学长我也不例外。但是同样就读于同一所学校，甚至同一个专业，同一个班级的同学能力又能相差多少？常言到骄兵必败，因此学弟你一定猜到了我接下来所经历的故事，在自视甚高的心态以及周围对“及格万岁”言论的推崇催化下，我并未保持一颗虚心求学的心态，这也导致了我大一学年的成绩惨败，当看到一学年加权倒数的那一刻，我承认我第一次体会到了自己与身边优秀同学的差距🥺。</p><p>但是，更加令人痛苦的事情莫过于“天才比你更加努力”，优秀的人总是多方面凸出的，在这里学习成绩仅仅是生活的一部分，还包括学部社团，创新创业，体育运动，音乐绘画…经历一段时间后，你会逐渐发现身边的人都会拥有自己的闪光点，无论是学绩第一且身兼多个职位的学生会会长，亦或是学绩平平却拥有各种竞赛奖项的创业大佬，还是从不学习却成绩始终不错同时精通各种乐器的社团精英，貌似每一个人都比自己优秀太多太多。而学长就是那个最普普通通的人，在别人闪亮的光芒下黯然失色，也许你已经听说过“微北洋”这个软件了吧，那么也一定听说过“天外天”这个社团了吧？作为校内十佳社团，其中优秀的大佬数不胜数，自从加入天外天工作室后学长第一次认识到了人们常说的“信息差”，原来有的人高二开始就自研编程，有的人早早就已通过雅思托福，有的人自小就广泛接触兴趣爱好，进入大学后更是学习社团两不误…，以上种种经历对我造成了巨大的精神打击😣，学长我当时常常思考大学生活到底该如何度过才能真正快乐？努力向前看齐，疲惫的跟上大佬们的脚步，最终亲眼见证着差距越来越远？还是摆烂躺平，及时行乐度过一个娱乐至上的四年生活？但是我相信更多的人是如我一般介于两者之间苦苦挣扎，既不能真正放下学习又不敢正视差距，在贪玩与懊悔中逐渐深陷谷底🤡。</p><div class="tag-plugin quot"><p class="content" type="text">三·重新出发，向阳而生</p></div><p>转眼间，来到了大三上半年，这是一个重要的转折时刻。因为从这一年开始优秀的学生基本确认了保研的资格，正在忙碌的准备研究生夏令营为自己的梦校拼搏；有些人早早规划好未来的求职方向，顺利面试进入了优秀的企业实习准备转正争取到了自己理想的工作；还有一些人在一年乃至两年的实验科研中取得了不错的科研成果，凭借各种优异的竞赛奖项与科研工作准备留学；而另外一些人突然意识到生活的压力正迅速逼近，面对即将迈入社会的挑战，少年总会在一夜之间迅速成长起来，考研还是工作😶‍🌫️？与之相比，像学长我这种普普通通的学生并未能早早规划好未来的打算，此刻面临着前方未知的挑战，内心充满了迷茫与无助。</p><p>幸运的是，在这个时候我终于接触到了自己感兴趣的知识领域——计算机图形学，一个通过计算机编程实现三维图形渲染和动画的学科，我梦想成为一名优秀的技术美工（如果你对计算机不太了解可以简单地理解为未来的游戏开发工程师，影视特效师）。为了能够争取更多的时间学习我所热爱的领域，我第一次产生了考研的想法，并且坚定无论风险有多大（计算机考研成功率不到20%)，我都要考入图形学领域的顶尖学府。毕竟，人这一生总得为一件事拼命一次吧💦。</p><p>也许是因为梦想总是能够激励一个人不断成长，三年来畏手畏脚的我克服了惰性，第一次参加了竞赛，第一次自发地每天早上八点准时来图书馆学习，第一次下定决心卸载掉一切游戏，全身心投入到考研中。接下来的日子里，或许上天终于看到了我这个愚笨少年的努力，我的运气变得越来越好，生活终于逐渐走上了正轨😌。我获得了竞赛国家级奖项、荣获三好学生称号、大创也取得优秀结项、考研初试高分通过并且复试顺利通过，最终被梦想的课题组录取，而且毕设取得了优秀的成绩。大四盛夏，我终于第一次真正感受到了大学时光的惬意与美好。我重新拾起了之前荒废的吉他，重新运营起了半途而废的博客，重新学习起了昔日放弃的绘画…我重新出发，向阳而生。</p><div class="tag-plugin quot"><p class="content" type="text">四·书写自己的故事</p></div><p>不知不觉，时钟已显示凌晨3:23，学长的笔下似乎有些昏昏欲睡😴，或许你也对这些故事感到厌倦了吧，毕竟他们似乎只是一些陈旧的故事，老掉牙而缺乏新意。然而，学长只不过是想通过自己的切身经历与你分享一些宝贵的经验。虽然我们常说道理具有延迟性，少年总是无法理解前辈的道理直至自己亲身体会，但是我还是希望你能够认真思考并采纳我的建议：</p><p>学习方面，你一定要早早进行规划，决定保研还是考研亦或是工作留学，不要认为一心可以多用，也不要担心考研就是失败的，其实大学生活乃至未来的社会生活对一个人的考验是多样化的，并不是仅仅由分数，绩点决定的，保研也只不过是一条赛道，他只是要求学生要持之以恒保持三年的长期学习，而考研则只是另一条赛道，你需要在一年的刻苦学习中，于高风险中争取更高的回报，工作留学亦是如此，赛道之间并无优劣最终大家都将抵达一个共同的终点，而每一个人内心都有自己的规划，你无需征求他人的建议，只需追随内心所向，早早确定好赛道并为之准备即可👌。</p><p>生活方面，人们常说大学时光就是用来试错的，因为我们还正年轻，作为刚刚步入成年的你们，一定要鼓足勇气尝试各种新事物包括加入感兴趣的社团👻，学习一门感兴趣的乐器，开始接触健身…四年的大学生活并不是如动漫一般每天充满了新事物，漫长且枯燥的生活中总是需要调味剂的，寻找一项自己热爱的事物并坚持下去，会让你的大学更加精彩同时也不会像学长我一样在毕业之际每每回忆时都为当时年少怯懦的自己未能鼓足勇气尝试新事物而感到后悔。当然，学弟一定要知道社会的考核终究是学习，切勿沉迷于娱乐事物之中哦~</p><p>社交方面，虽然我知道大部分人尤其是新生是不善交际的，但是多尝试与他人交流你会发现每个人都是一个有趣且善良的精灵，我们都渴望灵魂上的相识与认可💝，无论是舍友、同学、老师、伴侣，与其日久相熟，患难与共的经历都将是未来我们回忆大学时光的宝藏回忆。</p><p>无论是阳春三月的暖风、炎炎盛夏的蝉鸣、还是金秋时节的湖畔、凛冽冬日的寒风…四年的春夏秋冬，1200多个未来的日日夜夜，学长谨在此希望你能始终怀揣一颗快乐的心态度过一个不让自己后悔的大学时光，书写一段属于自己的美好故事。</p><div class="tag-plugin quot"><p class="content" type="text">终章</p></div><p>既然在夏天相遇，那么就在这个夏天结束吧！未来的362宿舍，就拜托给你们了🤝！</p><div class="tag-plugin tabs"id="tab_1"><div class="nav-tabs"><div class="tab active"><a href="#tab_1-1">毕业季相册</a></div><div class="tab"><a href="#tab_1-2">昔日的362</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_1-1"><p><img src="http://cdn.coolchong.cn/%E8%87%B4%E4%BA%B2%E7%88%B1%E5%AD%A6%E5%BC%9F%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/graduation.jpg" alt="" /></p><!-- endtab --></div><div class="tab-pane" id="tab_1-2"><div style="position: relative; width: 100%; height: 0; padding-left:5%;padding-bottom: 96%;"><iframe src="https://www.bilibili.com/video/BV1as4y1r7Lo?share_source=copy_web" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div><!-- endtab --></div></div></div><p>如果你想进一步与我认识，很高兴微信联系 <psw>加lwc_1422257646</psw> ，时间不早了隐隐约约东方朝阳已现，我也该奔赴下一段求学旅程了，天津大学，我们有缘再相见👋🏻！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大学四年，如梦一般，转瞬即逝。那晚无聊的盛夏本只道是寻常，却没想将成为少年日后魂牵梦萦的美好时光。虽然我的青春即将落幕，但是总有年轻的少年风华正茂，在此离别之际，学长谨以此篇书信赠予亲爱的学弟分享我的大学故事✍。&lt;/p&gt;</summary>
    
    
    
    <category term="毕业" scheme="https://coolchong.cn/categories/%E6%AF%95%E4%B8%9A/"/>
    
    
    <category term="毕业" scheme="https://coolchong.cn/tags/%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>浅谈用一维数组dp解决0/1背包问题</title>
    <link href="https://coolchong.cn/2022/02/24/dp01bag/"/>
    <id>https://coolchong.cn/2022/02/24/dp01bag/</id>
    <published>2022-02-24T06:41:56.000Z</published>
    <updated>2023-01-29T04:22:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客主要是受<a href="https://ac.nowcoder.com/acm/problem/14370">《牛客网入学考试</a>》题目启发，拓展浅谈一下自己对于从用二维数组dp解决0/1背包问题优化成用一维数组dp解决0/1背包问题的算法理解。</p><span id="more"></span><h3 id="用二维数组dp解决01背包问题"><a class="markdownIt-Anchor" href="#用二维数组dp解决01背包问题"></a> 用二维数组dp解决0/1背包问题</h3><p>其实这个问题在数月前曾总结过一次，在<a href="https://scholar.coolchong.cn/wiki/%E6%89%8B%E6%92%95%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/index.html">《动态规划》</a>中我曾总结过使用二维数组打表解决0/1背包问题的方法，并且也介绍了使用元组法尝试优化二维数组dp的思路，但是并没有给出具体的实现。这里我想重新定义一下二维数组dp解决0/1背包的问题。在之前的博客中我们介绍到打表时使用的函数定义如下：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210224145055.png" alt="" /></p><p>但是这貌似和大多数人的二维数组的板子不太一样，因为这里我定义的是f(i,y)为背包剩余容量为y时，在物品i~n中选取。然后每次打表都是让i从n开始递减到1，所以递归式是由后向前即根据i+1推出i。这里我重新修正定义f(i,y)函数含义为背包剩余容量为y时，在物品1~i中选取。那么我们在打表时，应该是让i从0逐渐递增打表，所以递归式应该修改为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mo>−</mo><mi>w</mi><mi>i</mi><mo stretchy="false">]</mo><mo>+</mo><mi>p</mi><mi>i</mi><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>y</mi><mo>&gt;</mo><mo>=</mo><mi>w</mi><mi>i</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mtext>能放入物品</mtext><mi>i</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mtext>，</mtext><mi>y</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mn>0</mn><mo>&lt;</mo><mo>=</mo><mi>y</mi><mo>&lt;</mo><mi>w</mi><mi>i</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f[i][y]=\begin{cases}max\{f[i-1][y],f[i-1][y-wi]+pi\},y&gt;=wi//能放入物品i\\f(i-1，y),0&lt;=y&lt;wi\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">i</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord">/</span><span class="mord">/</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">放</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">物</span><span class="mord cjk_fallback">品</span><span class="mord mathnormal">i</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>即对于每一行i的表格，要根据前一行i-1来推出下一行第i行的数值（之前是根据前一行i+1来推出下一行第i行的数值）。但是我们发现重定义完f(i,y)函数以后实际上本质上打表思路还是一样的，都是对于不同的i各自对应着表格的一行，然后对于每一行又会根据y的值对应不同的效益值。只是打表的行顺序变了而已，如下图：</p><p>对于之前的i从n开始的打表：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210224150139.png" alt="" /></p><p>现在改为i从1开始打表</p><table><thead><tr><th style="text-align:center">i\y</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">14</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">14</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">12</td><td style="text-align:center">12</td><td style="text-align:center">12</td><td style="text-align:center">12</td><td style="text-align:center">15</td></tr></tbody></table><p>上表中具体的数值不用在意，只是我们要理解打表的流程，上图中都是先对第一行对应的i不同的y进行打表，然后在后面的行中使用递归式进行打表。但是无论是哪种f(i,y)的定义，我们发现在打表时都是默认的y从0到最大值c递增对应的不同情况打表。这是因为二维数组dp时，递归式中的右边项总是来自已经存储于前一行中的数值。所以y是正序递增从0~c打表即可并无问题。板子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//代码转载于https://blog.csdn.net/weixin_41061962/article/details/80319436，非常感谢</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">KNAP</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> w; <span class="hljs-comment">//weight;</span><br><span class="hljs-type">int</span> v; <span class="hljs-comment">//value,or portfolio;</span><br>&#125;;<br><span class="hljs-comment">//二维的方式</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">solveKPd</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;KNAP&gt; cknap, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &gt; &amp;dp, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> Tw)</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;=Tw; j++)<br>&#123;<br>            <span class="hljs-comment">//先检验能否装入物品i</span><br><span class="hljs-keyword">if</span> (j&lt;cknap[i].w) dp[i+<span class="hljs-number">1</span>][j] = dp[i][j]; <br>           <span class="hljs-comment">//j是每一个子问题的w上界,这里与整体的Tw无关</span><br>            <span class="hljs-comment">//然后根据递归取最大值，其中这些右边的数值都来自于表的前一行</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dp[i][j] &lt; dp[i][j - cknap[i].w] + cknap[i].v)<br>dp[i+<span class="hljs-number">1</span>][j] = dp[i][j - cknap[i].w] + cknap[i].v;<br><span class="hljs-keyword">else</span><br>dp[i+<span class="hljs-number">1</span>][j] = dp[i][j];<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; dp[n][Tw] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> Tw; <span class="hljs-type">int</span> n;<br><span class="hljs-built_in">cin</span> &gt;&gt; Tw &gt;&gt; n;<br><span class="hljs-built_in">vector</span>&lt;KNAP&gt; cknap;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>KNAP temp;<br><span class="hljs-built_in">cin</span> &gt;&gt; temp.w &gt;&gt; temp.v;<br>cknap.push_back(temp);<br>&#125;<br><span class="hljs-built_in">vector</span>&lt; <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &gt; dp(n+<span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(Tw+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>));<br>solveKPd(cknap, dp, n, Tw);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用一维数组dp解决01背包问题"><a class="markdownIt-Anchor" href="#用一维数组dp解决01背包问题"></a> 用一维数组dp解决0/1背包问题</h3><p>现在我们思考一下用一维数组dp解决0/1背包问题，那么我们使用一维数组的思想就是每次打印第i行时都能够刚好把第i-1行的数据覆盖掉，这样，就不是二维打表了，永远是在一个一维数组中进行。所以很明显f(i,y)函数中的i就不需要了，因为永远只有一行。所以变为了f(y)，即只有一个自变量参数背包剩余容量y。那么我们知道无论如何，第i行的数据肯定是需要与来自于第i-1行的数据比较的，只是在一维数组的方法中，使用完这个第i-1行数据以后就用新的第i行数据覆盖掉了。所以我们在推导第i行的数据时要保证他需要的第i-1行数据还存在。此时我们可以遇见到一个问题，即y是从小到大递增还是从大到小递减进行打表求解？</p><p>首先我们知道递归式应该如下了：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><mi>f</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">[</mo><mi>y</mi><mo>−</mo><mi>w</mi><mi>i</mi><mo stretchy="false">]</mo><mo>+</mo><mi>p</mi><mi>i</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">f[y]=max\{f[y], f[y-wi]+pi\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">i</span><span class="mclose">}</span></span></span></span></span></p><p>我们假设此时还是沿用之前的思路，y从小到大开始递增进行打表，那么板子应该如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//此时每次遍历i就是打印一行</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>    <span class="hljs-comment">//注意，此时y还是从小到大</span><br>        <span class="hljs-keyword">for</span> (y = <span class="hljs-number">0</span>; y &lt;=c&amp;&amp;y&gt;=w[i]; y++)&#123;<br>            <span class="hljs-comment">//右边的都是第i-1次循环的结果</span><br>            f[y] = max(f[y], f[y - w[i]] + p[i]);<br>        &#125;<br>&#125;<br>       <br></code></pre></td></tr></table></figure><p>我们发现有点bug,就是假设现在打印完了i=1情况下的所有f(y)的值，那么此时f(0)~f©表示的都是i=1情况下的值（注意此时f函数的自变量参数为背包剩余容量y)。那么如果按照递增打印，此时我们要打印i=2情况了，y从0开始根据推导式求得了i=2时的f(0)，那么此时f(0)就要更新为i=2的情况了，所以此时一维数组中f(0)是对应的i=2,其他f(2)~f(n)对应的还是i=1的情况，那么此时我们要求解i=2情况下的f(1)可能会用到i=1情况下的f(0)（比如此时根据递归式f(1)=max[f(1),f(1-w[1])+p1)],恰巧后一项的f(1-w[1])=f(0)），那么就会用到i=1时的f(0)）。但是我们惊讶的发现此时f(0)已经不是i=1的情况了，而是更新成了i=2的情况了，所以此时i=2情况下的f(1)就不能求解了因为缺少上一行i=1时的f(0)值。所以y正序打印是不行的，我们需要让y倒序打印，即板子修改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//此时每次遍历i就是打印一行</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>    <span class="hljs-comment">//注意，此时y还是从大到小</span><br>        <span class="hljs-keyword">for</span> (y = c; y&gt;=w[i]; y--)&#123;<br>            <span class="hljs-comment">//右边的都是第i-1次循环的结果</span><br>            f[y] = max(f[y], f[y - w[i]] + p[i]);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们再分析一下，当i=1这行打完表以后，我们按照上面的代码，是先根据i=1的值推导出了i=2情况下的f©并且更新f©为i=2的值，此时f(0)~f(c-1)还是i=1的情况f©是i=2的值，我们要打印f(c-1)了，可能f(c-1)会用到i=1时的f(c-3),我们发现此时f(c-3)确实还是i=1的值，恰好可以用。所以y从大到小打印刚好可以使用到之前的值，并且更新以后的值不会影响后面的推导。</p><p>最后我们总结一句话，就是对于f[y], 它要调用的f[y-w[i]]一定是第i层循环还没有更新过的, 换言之, f[y-wi]只有可能是第i-1层存储的数据。这就是y要逆序打印的原因，至于i可以正序也可以逆序，只是对应着不同的f函数的定义。</p><h4 id="核心板子"><a class="markdownIt-Anchor" href="#核心板子"></a> 核心板子</h4><p>因此一维数组dp解决0/1背包板子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//此时每次遍历i就是打印一行</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>    <span class="hljs-comment">//注意，此时y还是从大到小</span><br>        <span class="hljs-keyword">for</span> (y = c; y&gt;=w[i]; y--)&#123;<br>            <span class="hljs-comment">//右边的都是第i-1次循环的结果</span><br>            f[y] = max(f[y], f[y - w[i]] + p[i]);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="思考物品能否放入背包的特判放到了哪里"><a class="markdownIt-Anchor" href="#思考物品能否放入背包的特判放到了哪里"></a> 思考：物品能否放入背包的特判放到了哪里？</h4><p>此时物品能够放入背包的特判放到了第二个for循环中了，这也是巧合之处。只有满足了特判条件才能够进行下面的更新，并且此时你可能会有疑虑，一旦不满足了情况就会退出y循环，那么这行值是否会出现还未打印完的情况，即前面还是未更新的值，此时我们细想一下，未更新的值实际上也可以看成是更新的值了，只是由于为装入物品i所以，值并未变化，直接沿用之前的i-1的值即可了。所以二维与一维最大的区别有</p><ol><li>二维y是从小到大和从大到小均可以，但是一维y必须从大到小逆序</li><li>二维数组中的递归式目的是填写值，必须每一个位置都重新通过递归式进行填值，但是在一维方法中递归式的目的是更新值，如果不满足物品i可以装入的条件，那么前面的所有值均不会变化，也就无需更新，直接退出循环即可。</li></ol><h4 id="思考二维方法与一维方法的结果特点对比"><a class="markdownIt-Anchor" href="#思考二维方法与一维方法的结果特点对比"></a> 思考：二维方法与一维方法的结果特点对比？</h4><p>二维方法中我们求解完以后是一张完整的表格，他里面填写了对于不同的i不同的y情况时的效益值，但是在一维方法中最终我们求得的是一个向量，只保存了i=n,不同y情况的效益值，一维方法的其他i情况的值在多次推导和更新中被更新的值覆盖了。但是，最终我们需要的只是满足题干的f(n,c)或者f©而已，所以两个方法均可以使用，但是一维方法更简单高效。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇博客主要是受&lt;a href=&quot;https://ac.nowcoder.com/acm/problem/14370&quot;&gt;《牛客网入学考试&lt;/a&gt;》题目启发，拓展浅谈一下自己对于从用二维数组dp解决0/1背包问题优化成用一维数组dp解决0/1背包问题的算法理解。&lt;/p&gt;</summary>
    
    
    
    <category term="算法总结" scheme="https://coolchong.cn/categories/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="dp" scheme="https://coolchong.cn/tags/dp/"/>
    
    <category term="背包问题" scheme="https://coolchong.cn/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>前后端跨域请求解决策略</title>
    <link href="https://coolchong.cn/2022/01/11/cross-origin/"/>
    <id>https://coolchong.cn/2022/01/11/cross-origin/</id>
    <published>2022-01-11T06:33:09.000Z</published>
    <updated>2023-01-29T03:02:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>在前后端分离开发的项目中，我们总是会遇到请求跨域的问题，每一次都避免不了开发人员之间的对线，为了缓解同事友谊，翀翀特此提供一篇完美解决前后端跨域请求的攻略😉~</p><span id="more"></span><h3 id="什么是跨域"><a class="markdownIt-Anchor" href="#什么是跨域"></a> 什么是跨域</h3><p>我们在进行本地前后端项目的接口对接或者是项目打包部署到线上以后（但是前后端项目部署到了不同的服务器上），那么此时就可能会出现跨域的问题，他总是出现如下的报错：</p><img src="https://langwenchong.gitee.io/figure-bed/20220111144458.png" style="zoom:150%;" /><p>如上所示，控制台警告信息中提示我们这个从本地<code>http://localhost:8080</code>发起的向<code>http://api.cheeseburgerim.space/api/user/login</code>的请求被跨域限制策略所阻挡了，并且如果想要通过请在请求函数中添加一系列请求头，但是往往我们在添加以后仍然不能解决。</p><p>如果想要解决这个跨域问题，我们首先需要了解跨域请求被阻拦的原因：</p><h4 id="跨域请求产生的原因"><a class="markdownIt-Anchor" href="#跨域请求产生的原因"></a> 跨域请求产生的原因</h4><p>我们首先要了解什么是<code>跨域</code>,跨域是因为浏览器的同源策略限制，是浏览器的一种安全机制，服务端之间就不会产生跨域的。所谓<code>同源</code>就是指两个页面具有相同的协议，相同的主机和相同的端口，三者之中有一个不同的时候就会产生跨域。如下所示：</p><table><thead><tr><th style="text-align:center">当前页面url</th><th style="text-align:center">被请求页面url</th><th style="text-align:center">是否跨域</th><th style="text-align:center">产生原因</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://www.test.com/">http://www.test.com/</a></td><td style="text-align:center"><a href="http://www.test.com/index.html">http://www.test.com/index.html</a></td><td style="text-align:center">否</td><td style="text-align:center">同源（协议、域名、端口号均相同）</td></tr><tr><td style="text-align:center"><a href="http://www.test.com/">http://www.test.com/</a></td><td style="text-align:center"><a href="https://www.test.com/index.html">https://www.test.com/index.html</a></td><td style="text-align:center">是</td><td style="text-align:center">协议不同（http/https)</td></tr><tr><td style="text-align:center"><a href="http://www.test.com/">http://www.test.com/</a></td><td style="text-align:center"><a href="http://www.baidu.com/">http://www.baidu.com/</a></td><td style="text-align:center">是</td><td style="text-align:center">主域名不同（test/baidu）</td></tr><tr><td style="text-align:center"><a href="http://www/test.com/">http://www/test.com/</a></td><td style="text-align:center"><a href="http://api.test.com/">http://api.test.com/</a></td><td style="text-align:center">是</td><td style="text-align:center">子域名不同（www/api)</td></tr><tr><td style="text-align:center"><a href="http://www.test.com:8080/">http://www.test.com:8080/</a></td><td style="text-align:center"><a href="http://test.com:7001/">http://test.com:7001/</a></td><td style="text-align:center">是</td><td style="text-align:center">端口号不同（8080/7001)</td></tr></tbody></table><div class="tag-plugin note" color="cyan"><div class="body"><p>我们可以总结出不产生跨请求域的条件是：①协议必须一致②域名必须完全相同③端口号必须一致</p></div></div><h4 id="简单请求非简单请求"><a class="markdownIt-Anchor" href="#简单请求非简单请求"></a> 简单请求/非简单请求</h4><p>然后接下来我们再来了解一下简单请求和非简单请求，在有时候我们会发现请求发出以后在控制的network栏监控处可以发现有些请求明明应该只执行一次，但是实际上他会执行两次，这是因为它属于非简单请求，此时会先发送一个预检验请求如下所示：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20220111150522.png" alt="" /></p><p>我们在一些传送复杂文件的请求A中就会发现在这个请求发送之前，他会先发送一个如上所示的OPTIONS请求并且通常返还的是200，包括了响应请求的信息即对方服务器关于请求的一些限制信息，然后接下来才会发送这个真正的传输文件的请求A，如果不满足对方的要求就会报错。</p><h5 id="简单请求"><a class="markdownIt-Anchor" href="#简单请求"></a> 简单请求</h5><p>但是一般情况下我们使用的都是简单请求，他包括：</p><ol><li>请求方法为：HEAD、GET、POST中的一种</li><li>HTTP请求头中字段不超过：Accept、Accept-Language、Content-Language、Last-Event-ID</li><li>Content-Type字段值为application/x-www-form-urlencoded、multipart/form-data、text/plain中的一种</li></ol><h5 id="非简单请求"><a class="markdownIt-Anchor" href="#非简单请求"></a> 非简单请求</h5><p>对于简单请求不会发起预检验请求，而以下的这些就是非简单请求，他在请求真正发起之前会先进行预检验请求可以获取到服务器设置的响应请求信息以及对发起请求的限制：</p><ol><li>请求方法为PUT、DELETE</li><li>发送JSON格式的ajax请求</li><li>http中带自定义请求头</li></ol><h5 id="简单请求的跨域"><a class="markdownIt-Anchor" href="#简单请求的跨域"></a> 简单请求的跨域</h5><p>对于简单请求，如果浏览器发现是跨域请求，就会自动在请求头中加入Origin字段，代表请求来自哪个域（协议+主机名+端口号），服务器收到请求以后，根据请求头中Origin中字段值来判断是否允许跨域请求通过。如果想要解决跨域问题，只需要在服务器的响应头Access-Control-Allow-Origin字段中设置指定的域名，表示允许这些域名的跨域请求。如果请求头中Origin字段的域名包含在这些域名中，则可以实现跨域请求（当然有时候还需要结合其他字段来判断），否则不通过。</p><h5 id="非简单请求的跨域"><a class="markdownIt-Anchor" href="#非简单请求的跨域"></a> 非简单请求的跨域</h5><p>而对于非简单请求的跨域，会先发送一次“预检”（OPTIONS)请求。预检请求会事先询问服务器，当前域名是否在服务器允许的范围内，以及可以使用那些HTTP动词和信息字段。只有得到肯定答复以后，浏览器才会发出真正的HTTP请求，否则就会报错。</p><div class="tag-plugin note" color="cyan"><div class="body"><p>了解完以上的信息以后，我们会发现无论是哪种跨域，实际上解决办法就是两种策略：①代理请求端使其请求源和服务端一致②后端服务器配置请求允许不同源的请求</p></div></div><h3 id="开发环境解决跨域"><a class="markdownIt-Anchor" href="#开发环境解决跨域"></a> 开发环境解决跨域</h3><p>在开发环境中我们可以向后端大大为我们配置跨域允许，这样我们前端就无需在配置任何东西了，但是俗话说的好：“自己动手，丰衣足食”，我们才不要作一个看后端开发脸色的前端攻城狮🤣，因此我们可以在开发环境中在前端自己解决跨域问题：</p><div class="tag-plugin note" color="cyan"><div class="body"><p>要注意，如果你在开发时使用POSTman进行接口的调试工作，那么请注意POSTman是默认永远不会产生跨域的，因此如果你的请求在POSTman中请求成功了并不一定就不会产生跨域而被浏览器所拦截。</p></div></div><h4 id="策略一chrome插件代理"><a class="markdownIt-Anchor" href="#策略一chrome插件代理"></a> 策略一：chrome插件代理</h4><p>在前端配置解决跨域的策略无非就是使用代理，让我们的请求在被封装以后能够以同源的身份被后台服务器所能允许接收，此时我们可以使用代码进行配置，但是如果你是小白的话，完全可以试一试这种使用插件代理的方法：</p><p>这里给出插件的百度网盘地址</p><div class="tag-plugin link dis-select"><a class="link-card plain" title="提取码：wssb" href="https://pan.baidu.com/s/1koaZyGBNhKp6uZOVlTP5iQ" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="icon"><div class="left"><span class="title">提取码：wssb</span><span class="cap link fs12">https://pan.baidu.com/s/1koaZyGBNhKp6uZOVlTP5iQ</span></div><div class="right"><div class="lazy img" data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.4/link/8f277b4ee0ecd.svg"></div></div></a></div><p>下载完成以后，在chrome中打开扩展程序选择开发者模式将这个插件进行安装：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20220111153354.png" alt="" /></p><p>安装完成以后将会这个插件开启并置顶，那么我们就可以使用这个插件进行代理了：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20220111153607.png" alt="" /></p><h4 id="策略二vue中proxytable代理"><a class="markdownIt-Anchor" href="#策略二vue中proxytable代理"></a> 策略二：vue中proxyTable代理</h4><p>如果你前端使用的是vue框架，那么可以试试这种方法，即使用vue提供的ProxyTable进行代理从而实现同源请求，假设现在我们要请求的是一个登录接口：<code>https://api.coolchong.cn/api/user/login</code>,同时其他的请求接口也类似比如注册是<code>https://api.coolchong.cn/api/user/register</code>等等，而我们本地开发时热加载预览的地址是<code>http://localhost:8080</code>, 此时为了解决跨域，我们需要将我们的源也代理成<code>https://coolchong.cn</code>，此时我们就可以使用proxyTable，如果你的vue也是2.x版本那么可以直接在<code>/config/index.js</code>中找到如下代码，如果是vue3.x那么也可以在类似的路径中找到：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20220111154211.png" alt="" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Paths</span><br>   <span class="hljs-attr">assetsSubDirectory</span>: <span class="hljs-string">&#x27;static&#x27;</span>,<br>   <span class="hljs-attr">assetsPublicPath</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>   <span class="hljs-attr">proxyTable</span>: &#123;<br>     <span class="hljs-string">&#x27;/apis&#x27;</span>: &#123;<br>       <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;https://api.coolchong.cn&#x27;</span>, <span class="hljs-comment">// 你要代理的域名和端口号，要加上http</span><br>       <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 跨域</span><br>       <span class="hljs-attr">pathRewrite</span>: &#123;<br>         <span class="hljs-string">&#x27;^/apis&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">// 这里用‘/apis’代替target里面的地址，组件中调用接口时直接用api代替 比如我要调用&#x27;http://xxx.com:8080/api/NEWS/getNews.json?page=1&amp;pageSize=10&#x27;，直接写‘/api/NEWS/getNews.json?page=1&amp;pageSize=10’即可</span><br>       &#125;<br>     &#125;<br>   &#125;,<br></code></pre></td></tr></table></figure><div class="tag-plugin note" color="cyan"><div class="body"><p>一定要注意修改的是dev即开发环境下的proxyTable，不要改错了。同时当修改了配置以后需要重启这个项目才能加载新的配置。</p></div></div><p>配置完成以后，如果此时我们再在本地请求这个接口时，使用<code>/apis/user/login</code>代替<code>https://api.coolchong.cn/api/user/login</code>,用<code>/api/user/register</code>代替<code>htts://api.coolchong.cn/api/user/register</code>即可。如下我用axios来演示一下写法：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20220111154707.png" alt="" /></p><p>自此我们就完成了开发环境下前端解决跨域问题的配置。</p><h3 id="部署线上解决跨域"><a class="markdownIt-Anchor" href="#部署线上解决跨域"></a> 部署线上解决跨域</h3><p>但是我们会发现上面这种方法只适用于本地开发调试环境时使用，一个项目真正打包完成部署上去还是会面临跨域，因此接下来我们讲一讲后台的配置来解决项目打包部署线上的跨域问题解决策略。此时我们还是以上面的例子作为讲解。</p><p>我们知道实际上前端最终要进行请求的接口还是<code>https://api.coolchong.cn/api/user/login</code>，因此我们在完成开发以后部署前先将axios的默认地址baseURL更改回：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20220111155211.png" alt="" /></p><p>同时在项目打包前将代理proxyTable注释掉：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20220111155251.png" alt="" /></p><p>那么很显然此时项目的所有请求都会处于跨域状态，但是不用担心，此时我们是在后端解决跨域，因此前端可以直接打包部署了，具体流程参考本篇博客：</p><div class="tag-plugin link dis-select"><a class="link-card plain" title="vue项目部署" href="https://scholar.coolchong.cn/2021/10/18/nginx-web/" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="icon"><div class="left"><span class="title">vue项目部署</span><span class="cap link fs12">https://scholar.coolchong.cn/2021/10/18/nginx-web/</span></div><div class="right"><div class="lazy img" data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.4/link/8f277b4ee0ecd.svg"></div></div></a></div><p>接下来我们进行后端的配置，此时的跨域解决策略就是后端允许任何不同源的请求进行响应，操作很简单，我们只需要为项目添加一个<code>/configuration/WebMvcConfig.java</code>配置类，代码如下：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20220111155749.png" alt="" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.deliverysystem.configuration;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Lang wenchong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/25 21:55</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .allowCredentials(<span class="hljs-literal">true</span>)<br>                .allowedOriginPatterns(<span class="hljs-string">&quot;*&quot;</span>)<br>                .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>)<br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>                .exposedHeaders(<span class="hljs-string">&quot;origin&quot;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们再将后端代码打包成jar包部署到服务器即可，此时前后端部署的主机不同也不会产生跨域请求了，解决了线上部署环境下的跨域问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在前后端分离开发的项目中，我们总是会遇到请求跨域的问题，每一次都避免不了开发人员之间的对线，为了缓解同事友谊，翀翀特此提供一篇完美解决前后端跨域请求的攻略😉~&lt;/p&gt;</summary>
    
    
    
    <category term="开发技能" scheme="https://coolchong.cn/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="跨域" scheme="https://coolchong.cn/tags/%E8%B7%A8%E5%9F%9F/"/>
    
    <category term="springboot" scheme="https://coolchong.cn/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>vuex从入门到实战</title>
    <link href="https://coolchong.cn/2021/12/12/vuex/"/>
    <id>https://coolchong.cn/2021/12/12/vuex/</id>
    <published>2021-12-12T06:26:45.000Z</published>
    <updated>2023-01-29T10:27:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>vuex是一款针对vue.js中复杂的通信场景下衍生的技术插件，他可以有效的帮助我们轻松完成大范围内的组件通信，还不快进来学习😋？</p><span id="more"></span><h3 id="vuex简介"><a class="markdownIt-Anchor" href="#vuex简介"></a> vuex简介</h3><p>什么是 <code>vuex</code>？这是每一个新手小白都很好奇的问题，我们要知道任何一种新技术的产生肯定都是为了解决某种复杂的问题，而vuex就是为了解决大范围内vue组件中通信问题的。这里我们从组件的通信方式入手来逐步了解vuex产生的缘由以及他的作用。</p><h4 id="传统组件通信方式"><a class="markdownIt-Anchor" href="#传统组件通信方式"></a> 传统组件通信方式</h4><p>我们回忆一下我们之前学习的组件通信的方式，常用的是父子组件之间的通信，此时父组件通过 <code>:bind</code>绑定一个值给子组件，然后子组件通过 <code>props</code>接收这个值，此时这个从父组件拿到的值是响应式的，但是仅仅是单向更新，即子组件只能接受到父组件更新的这个值，而子组件是不能修改父组件中的值的，为了能实现子组件向父组件更新这个值，子组件需要通过 <code>$emit</code>触发父组件提前为子组件分配并绑定方法实现更新，如下图所示是一个简单的父子组件通信demo:</p><div class="tag-plugin tabs"id="tab_2"><div class="nav-tabs"><div class="tab active"><a href="#tab_2-1">Tab/index.vue</a></div><div class="tab"><a href="#tab_2-2">App.vue</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_2-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;changeTab(1)&quot;<br>      :class=&quot;[&#123; current: curIdx === 1 &#125;]&quot;<br>    &gt;<br>      选项1&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;changeTab(2)&quot;<br>      :class=&quot;[&#123; current: curIdx === 2 &#125;]&quot;<br>    &gt;<br>      选项2&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;changeTab(3)&quot;<br>      :class=&quot;[&#123; current: curIdx === 3 &#125;]&quot;<br>    &gt;<br>      选项3&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;changeTab(4)&quot;<br>      :class=&quot;[&#123; current: curIdx === 4 &#125;]&quot;<br>    &gt;<br>      选项4&lt;/a<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;Tab&quot;,<br>  //接收父组件传递进来的curIdx的值<br>  props: &#123;<br>    curIdx: Number,<br>  &#125;,<br>  //点击触发父组件更新curIdx值<br>  methods: &#123;<br>    changeTab(i) &#123;<br>      this.$emit(&quot;changeTab&quot;, i);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>a &#123;<br>  margin-right: 10px;<br>&#125;<br>.current &#123;<br>  color: #000;<br>  text-decoration: none;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_2-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;!-- 传递给子组件Tab的值以及为他绑定一个方法用来通知父组件更新值 --&gt;<br>    &lt;Tab :curIdx=&quot;curIdx&quot; @changeTab=&quot;changeTab&quot; /&gt;<br>    &lt;!-- &lt;Page :curIdx=&quot;curIdx&quot;&gt;&lt;/Page&gt; --&gt;<br>    &lt;!-- &lt;img src=&quot;./assets/logo.png&quot;&gt; --&gt;<br>    &lt;!-- &lt;router-view/&gt; --&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Tab from &quot;@/components/Tab&quot;;<br>// import Page from &quot;@/components/Page&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  components: &#123;<br>    Tab,<br>    // Page,<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      curIdx: 0,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    changeTab(i) &#123;<br>      this.curIdx = i;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: &quot;Avenir&quot;, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  /* text-align: center; */<br>  color: #2c3e50;<br>  margin-top: 60px;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><!-- endtab --></div></div></div><p><img src="https://langwenchong.gitee.io/figure-bed/20211212153218.png" alt="" /></p><p>此时我们会得到一个如上图简单的父子组件通信的小demo，我们可以点击不同的链接按钮，然后链接按钮被点击后会变成黑色且无下划线，这是通过父组件操控子组件中的curIdx动态的为子组件中的四个a标签绑定 <code>current</code>类实现的，同时我们在点击子组件Tab中不同的a标签后会触发 <code>changeTab</code>方法来更新父组件中的curIdx值，进一步子组件在通过prop更新自己的curIdx实现的动态绑定current类到对应被点击的a标签的。如果你对这个简单的小demo还无法理解的话请先查看此篇教程：</p><div class="tag-plugin link dis-select"><a class="link-card plain" title="父子组件通信" href="https://www.cnblogs.com/HouJiao/p/12421851.html" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="icon"><div class="left"><span class="title">父子组件通信</span><span class="cap link fs12">https://www.cnblogs.com/HouJiao/p/12421851.html</span></div><div class="right"><div class="lazy img" data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.4/link/8f277b4ee0ecd.svg"></div></div></a></div><p>接下来我们再尝试加入一个兄弟组件通信的场景，假设此时我们不仅仅需要通过curIdx来实时更新渲染Tab子组件中的被选中a标签，同时我们还希望可以通过curIdx实时刷新显示Tab栏下方的 <code>Content</code>页面中的内容，那么我们需要再新建一个组件Page同时在App.vue中引入并使用这个子组件如下</p><div class="tag-plugin tabs"id="tab_3"><div class="nav-tabs"><div class="tab active"><a href="#tab_3-1">Page/index.vue</a></div><div class="tab"><a href="#tab_3-2">App.vue</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_3-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;&#123;&#123; content[curIdx - 1] &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;Page&quot;,<br>  props: &#123;<br>    curIdx: Number,<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>        // 根据prop接收的curIdx动态显示内容<br>      content: [&quot;页面1&quot;, &quot;页面2&quot;, &quot;页面3&quot;, &quot;页面4&quot;],<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_3-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;!-- 传递给子组件Tab的值以及为他绑定一个方法用来通知父组件更新值 --&gt;<br>    &lt;Tab :curIdx=&quot;curIdx&quot; @changeTab=&quot;changeTab&quot; /&gt;<br>    &lt;!-- Page组件也接受这个curIdx值 --&gt;<br>    &lt;Page :curIdx=&quot;curIdx&quot;&gt;&lt;/Page&gt;<br>    &lt;!-- &lt;img src=&quot;./assets/logo.png&quot;&gt; --&gt;<br>    &lt;!-- &lt;router-view/&gt; --&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Tab from &quot;@/components/Tab&quot;;<br>import Page from &quot;@/components/Page&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  components: &#123;<br>    Tab,<br>    Page,<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      curIdx: 0,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    changeTab(i) &#123;<br>      this.curIdx = i;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: &quot;Avenir&quot;, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  /* text-align: center; */<br>  color: #2c3e50;<br>  margin-top: 60px;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><!-- endtab --></div></div></div><p><img src="https://langwenchong.gitee.io/figure-bed/20211212153828.png" alt="" /></p><p>此时我们就得到了一个最经典的vue兄弟组件传值的demo,即Tab栏中的a标签被点击后会通过 <code>$emit</code>触发changeTab函数来更新父组件中的curIdx值，然后Page组件接收到这个新更新的curIdx值来动态显示内容，这样就实现了点击不同的标签显示对应不同的内容。</p><h5 id="思考上面的例子中父组件的作用"><a class="markdownIt-Anchor" href="#思考上面的例子中父组件的作用"></a> 思考：上面的例子中父组件的作用？</h5><p>我们考虑一下上面的实例代码即最传统的兄弟组件的通信方式有没有什么弊端。我们发现父组件完全就是承担了连个兄弟组件中的桥梁作用，父组件自己并不需要使用curIdx值和changeTab方法，但是为了能够让Tab和Page两个兄弟组件通信，又不得不加入这些内容，显然这种实现逻辑很奇怪，为什么不能直接让两个兄弟组件直接通信呢？进一步考虑，如果是两个有共同祖先的兄弟组件通信可就不仅仅是需要父组件承担桥梁身份这么简单了，可能会涉及到更多的祖先组件加入许多没用的东西，即如下图所示的场景：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211212154714.png" alt="" /></p><p>很显然这种方式的通信一旦面对较为庞大且复杂的应用场景效率会极低，因此我们需要一个第三方插件能够专业的承担这个桥梁的作用，同时它不仅仅能够实现简单的拥有共同父祖先子组件之间的通信，甚至可以实现任意多个组件之间的通信，此时我们就会用到 <code>vuex</code>了！它提供了一个store仓库用来维护所有组件需要通信时用到的数据，并提供对应的方法来为通信的组件实时更新值，这就是vuex的由来，如下图就是它工作的原理：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211212155115.png" alt="" /></p><p>我们可以很容易的看出使用 <code>vuex</code>的优势：</p><ol><li>能够在vuex中集中管理共享的数据，易于开发和后期维护</li><li>能够高效地实现组件之间的数据共享，提高开发效率</li><li>存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步</li></ol><p>既然vuex的好处那么多，接下来我们就来学习使用vuex吧😀！</p><h4 id="vuex工作流程"><a class="markdownIt-Anchor" href="#vuex工作流程"></a> vuex工作流程</h4><p>首先我们来学习一下vuex中的几个基本概念，如下图是vuex的一个工作流程：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211212155701.png" alt="" /></p><ul><li>VueComponents：需要进行通信的vue组件，不在vuexAPI范围之内</li><li>State：一个对象，类似于data对象用来存储维护通信需要使用到的所有数据</li><li>Mutations：也是一个对象，类似于methods存储了更新State数据的方法，<strong>只有Mutations中的方法可以更新State中的数据</strong></li><li>Actions：如果需要异步调用Mutations方法，那么所有的异步操作都要在Actions中完成</li><li>Devtools：热加载插件，不用管</li><li>Getters：除了上图中这些概念，还有一个Getters，他是类似于computed可以根据State中的值进一步封装操作得到一个新数据并返还</li><li>Modules：如果是针对于企业级项目，还有一个Modules属性用来分模块引入并应用vuex，后面我们也会学习到。</li></ul><div class="tag-plugin note" color="cyan"><div class="title">要注意除了</div><div class="body"><p><code>State</code>剩下的都是复数形式这是因为它可以存储多个方法或者数据，因此是Mutations、Actions、Getters、Modules。</p></div></div><h3 id="vuex应用"><a class="markdownIt-Anchor" href="#vuex应用"></a> Vuex应用</h3><h4 id="vuex安装"><a class="markdownIt-Anchor" href="#vuex安装"></a> vuex安装</h4><p>接下来我们就尝试将上面的例子使用 <code>vuex</code>来实现。首先我们需要安装vuex,只需要在终端输入如下命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vuex --save<br></code></pre></td></tr></table></figure><p>安装完成以后为了方便管理，我们在根目录下创建一个新的文件夹为store并在其下新建一个入口文件index.js如下图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211212162744.png" alt="" /></p><p>并在index.js中加入如下内容用来引入并挂在vuex：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">// 由于是插件，因此需要将其挂载到vue上</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 注意返还的是一个vuex的仓库对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// 里面包含之前介绍的几个属性</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-comment">// 用来维护通信使用的数据</span><br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 用来定义修改state中数据的方法</span><br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">// 异步操作</span><br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-comment">// 分模块引入</span><br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>现在我们就来使用vuex更改刚刚的代码。</p><h4 id="state使用"><a class="markdownIt-Anchor" href="#state使用"></a> state使用</h4><p>由于我们之前使用的是curIdx来进行的兄弟组件之间的通信，因此很显然这个curIdx就是一个需要vuex维护的值，我们将其定义到vuex的state中而不再在父组件app.vue中定义。同时在Tab中和Page中我们也无需在通过prop来接收这个curIdx值了，而是改用vuex的state来获取这个值，如下图是两种不同的写法。</p><p>首先无论是哪种写法我们都需要在store/index.js中声明定义这个curIdx如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">// 由于是插件，因此需要将其挂载到vue上</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 注意返还的是一个vuex的仓库对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// 里面包含之前介绍的几个属性</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-comment">// 用来维护通信使用的数据</span><br>    <span class="hljs-attr">curIdx</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 用来定义修改state中数据的方法</span><br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">// 异步操作</span><br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-comment">// 分模块引入</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>然后我们取消父组件中所有的有关传值数据，如下图父组件不再需要定义curIdx了并且引用子组件时也无需在为他们传递一个curIdx了即从父组件的角度来看他根本就不知到curIdx的存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;!-- 传递给子组件Tab的值以及为他绑定一个方法用来通知父组件更新值 --&gt;<br>    &lt;!-- &lt;Tab :curIdx=&quot;curIdx&quot; @changeTab=&quot;changeTab&quot; /&gt; --&gt;<br>    &lt;!-- 不在需要传递curIdx了 --&gt;<br>     &lt;Tab @changeTab=&quot;changeTab&quot; /&gt;<br>    &lt;!-- Page组件也接受这个curIdx值 --&gt;<br>    &lt;!-- &lt;Page :curIdx=&quot;curIdx&quot;&gt;&lt;/Page&gt; --&gt;<br>    &lt;!-- 不在需要传递curIdx了 --&gt;<br>    &lt;Page &gt;&lt;/Page&gt;<br>    &lt;!-- &lt;img src=&quot;./assets/logo.png&quot;&gt; --&gt;<br>    &lt;!-- &lt;router-view/&gt; --&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Tab from &quot;@/components/Tab&quot;;<br>import Page from &quot;@/components/Page&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  components: &#123;<br>    Tab,<br>    Page,<br>  &#125;,<br>  // 无需在定义curIdx了<br>  // data() &#123;<br>  //   return &#123;<br>  //     curIdx: 0,<br>  //   &#125;;<br>  // &#125;,<br>  methods: &#123;<br>    changeTab(i) &#123;<br>      this.curIdx = i;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: &quot;Avenir&quot;, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  /* text-align: center; */<br>  color: #2c3e50;<br>  margin-top: 60px;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>接下来我们需要修改组件Tab和Page的代码去获取vuex中的curIdx,这里涉及到两种实现方法：</p><h5 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h5><p>首先我们为了能够保证全局组件中this中含有 <code>$store</code>这个对象，我们需要全局挂载一下store，只需要在main.js中加入如下代码即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// The Vue build version to load with the `import` command</span><br><span class="hljs-comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">// 首先从store文件夹下引入store(默认回去index.js中获取)</span><br><span class="hljs-comment">// 因此这里路径写道文件夹即可</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../store&#x27;</span><br><br><span class="hljs-comment">/* eslint-disable no-new */</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  router,<br>  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">App</span> &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;App/&gt;&#x27;</span>,<br>  <span class="hljs-comment">// 在这里挂在store对象</span><br>  store<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>这里以Tab作为示例，我们可以直接通过 <code>this.$store.state.curIdx</code>即可获取到这个值，因此Tab修改后的代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;!-- 不在使用prop而是使用this.$store.state.curIdx获取 --&gt;<br>    &lt;!-- 由于vue中template无需使用this --&gt;<br>    &lt;!-- 因此直接使用$store.state.curIdx即可 --&gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;changeTab(1)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 1 &#125;]&quot;<br>    &gt;<br>      选项1&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;changeTab(2)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 2 &#125;]&quot;<br>    &gt;<br>      选项2&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;changeTab(3)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 3 &#125;]&quot;<br>    &gt;<br>      选项3&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;changeTab(4)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 4 &#125;]&quot;<br>    &gt;<br>      选项4&lt;/a<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;Tab&quot;,<br>  //接收父组件传递进来的curIdx的值<br>  // props: &#123;<br>  //   curIdx: Number,<br>  // &#125;,<br>  //点击触发父组件更新curIdx值<br>  methods: &#123;<br>    changeTab(i) &#123;<br>      this.$emit(&quot;changeTab&quot;, i);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>a &#123;<br>  margin-right: 10px;<br>&#125;<br>.current &#123;<br>  color: #000;<br>  text-decoration: none;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>这样我们就获取到了vuex.store对象中的state对象内存储的curIdx值了，并且这个值也是动态响应变化的，可以实时更新，但是我们会发现这样写有一个小瑕疵就是每一次书写都要加上 <code>this.$store.state</code>太麻烦了，因此出现了方法二。</p><h5 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h5><p>这里我们以Page为例，方法二使用了 <code>mapState</code>辅助函数，这样我们就可以得到一个map对象，输入需要的变量名即可获取到这个state中存储的值，我们将其映射到我们自己的组件上，由于这个值是动态变化的，因此我们需要将他放到 <code>coputed</code>下如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;&#123;&#123; content[curIdx - 1] &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br><br>&lt;script&gt;<br>import &#123;mapState&#125; from &#x27;vuex&#x27;<br>export default &#123;<br>  name: &quot;Page&quot;,<br>  // 不在需要使用prop接受值<br>  // props: &#123;<br>  //   curIdx: Number,<br>  // &#125;,<br>  computed:&#123;<br>    //要注意其本身是一个计算函数，因此外部有一个括号包裹<br>    ...mapState(&#123;<br>      // 箭头函数可使代码更简练<br>      curIdx:state=&gt;state.curIdx,<br>      // 下面这种书写也可以<br>      // curIdx:&#x27;curIdx&#x27;,<br><br>    &#125;),<br>    // 当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组<br>    // ...mapState([&#x27;curIdx&#x27;])<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>        // 根据prop接收的curIdx动态显示内容<br>      content: [&quot;页面1&quot;, &quot;页面2&quot;, &quot;页面3&quot;, &quot;页面4&quot;],<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><div class="tag-plugin note" color="cyan"><div class="title">注意如果我们需要在获取到这个state中的值以后进一步和data中的值进行加工，那么此时需要使用到this来执行当前的vue实例，为了能够正确只想，此时就不能在使用箭头函数了比如：</div><div class="body"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span><br>   countPlusLocalState (state) &#123;<br>     <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">localCount</span><br>   &#125;<br> &#125;)<br></code></pre></td></tr></table></figure></div></div><h4 id="mutations使用"><a class="markdownIt-Anchor" href="#mutations使用"></a> mutations使用</h4><p>此时我们只是完成了子组件使用vuex中的curIdx,但是我们还需要更新这个curIdx，因此此时我们需要定义一个方法来更新它，此时就会用到mutations，我们在mutations中定义一个新的方法setCurIdx，要注意我们mutations中定义的方法默认的第一个参数永远是state指向state这样我们才能修改state中的值，因此加入setCurIdx后store/index.js代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">// 由于是插件，因此需要将其挂载到vue上</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 注意返还的是一个vuex的仓库对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// 里面包含之前介绍的几个属性</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-comment">// 用来维护通信使用的数据</span><br>    <span class="hljs-attr">curIdx</span>: <span class="hljs-number">1</span>,<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 用来定义修改state中数据的方法</span><br>    <span class="hljs-comment">// 用来修改state中的curIdx</span><br>    <span class="hljs-comment">// 默认第一个参数永远是state</span><br>    <span class="hljs-title function_">setCurIdx</span>(<span class="hljs-params">state, idx</span>) &#123;<br>      state.<span class="hljs-property">curIdx</span> = idx;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">// 异步操作</span><br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-comment">// 分模块引入</span><br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>同样的子组件调用mutations中函数的方式也有两种如下所示</p><h5 id="方法一-2"><a class="markdownIt-Anchor" href="#方法一-2"></a> 方法一</h5><p>我们可以在methods中定义一个新方法，然后通过如下指令触发调用mutations中的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//commit的第一个参数是要触发调用的函数名，第二个是传递的参数</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setCurIdx&#x27;</span>,idx)<br></code></pre></td></tr></table></figure><p>此时Tab的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;!-- 不在使用prop而是使用this.$store.state.curIdx获取 --&gt;<br>    &lt;!-- 由于vue中template无需使用this --&gt;<br>    &lt;!-- 因此直接使用$store.state.curIdx即可 --&gt;<br>    &lt;!-- 由于setCurIdx已经映射为了自己的方法因此直接调用即可 --&gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;setCurIdx(1)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 1 &#125;]&quot;<br>    &gt;<br>      选项1&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;setCurIdx(2)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 2 &#125;]&quot;<br>    &gt;<br>      选项2&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;setCurIdx(3)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 3 &#125;]&quot;<br>    &gt;<br>      选项3&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;setCurIdx(4)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 4 &#125;]&quot;<br>    &gt;<br>      选项4&lt;/a<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br><br>&lt;script&gt;<br>import &#123; mapMutations &#125; from &quot;vuex&quot;;<br>export default &#123;<br>  name: &quot;Tab&quot;,<br>  //接收父组件传递进来的curIdx的值<br>  // props: &#123;<br>  //   curIdx: Number,<br>  // &#125;,<br>  //点击触发父组件更新curIdx值<br>  methods: &#123;<br><br>    //  当然也可以不映射，而是直接调用this.$store.mutations.setCurIdx()修改<br>    setCurIdx(idx) &#123;<br>      this.$store.commit(&quot;setCurIdx&quot;, idx);<br>    &#125;,<br><br>    //甚至可以<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>a &#123;<br>  margin-right: 10px;<br>&#125;<br>.current &#123;<br>  color: #000;<br>  text-decoration: none;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>思考：能否不调用mutations中的方法而是直接操作curIdx？</strong></p><p>肯定会有同学想到了一个简单的方法即下面代码可以直接修改state中的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">curIdx</span>=idx;<br></code></pre></td></tr></table></figure><p>一定要注意这种方法是万万不可以的！因为虽然此时可以修改这个值，但是当应用逐渐庞大以后这种不通过mutations修改state中值的操作会难以跟踪，不方便后期bug的查找，因此一定不要这样写！</p><h5 id="方法二-2"><a class="markdownIt-Anchor" href="#方法二-2"></a> 方法二</h5><p>另一种方法就是还是通过辅助函数mapMutations来获取到这个方法并调用如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;!-- 不在使用prop而是使用this.$store.state.curIdx获取 --&gt;<br>    &lt;!-- 由于vue中template无需使用this --&gt;<br>    &lt;!-- 因此直接使用$store.state.curIdx即可 --&gt;<br>    &lt;!-- 由于setCurIdx已经映射为了自己的方法因此直接调用即可 --&gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;setCurIdx(1)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 1 &#125;]&quot;<br>    &gt;<br>      选项1&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;setCurIdx(2)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 2 &#125;]&quot;<br>    &gt;<br>      选项2&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;setCurIdx(3)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 3 &#125;]&quot;<br>    &gt;<br>      选项3&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;setCurIdx(4)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 4 &#125;]&quot;<br>    &gt;<br>      选项4&lt;/a<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br><br>&lt;script&gt;<br>import &#123; mapMutations &#125; from &quot;vuex&quot;;<br>export default &#123;<br>  name: &quot;Tab&quot;,<br>  //接收父组件传递进来的curIdx的值<br>  // props: &#123;<br>  //   curIdx: Number,<br>  // &#125;,<br>  //点击触发父组件更新curIdx值<br>  methods: &#123;<br>    // 使用映射的方法获取setCurIdx方法<br>    ...mapMutations([&#x27;setCurIdx&#x27;]),<br>    // changeTab(i) &#123;<br>    //   this.$emit(&quot;changeTab&quot;, i);<br>    // &#125;,<br><br>    //我们甚至可以进一步封装将setCurIdx改个名字<br>    // ...mapMutations([&#x27;setCurIdx&#x27;]),<br>    // changeTab(idx)&#123;<br>    //   this.setCurIdx(idx);<br>    // &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>a &#123;<br>  margin-right: 10px;<br>&#125;<br>.current &#123;<br>  color: #000;<br>  text-decoration: none;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>思考：如果需要传递多个参数怎么办？</strong></p><p>此时并不是在commit（）方法后面追加多个参数，而是将所有的数据打包封装成一个对象传递，这个对象又称为 <code>payload</code>，学名 <code>提交载荷</code>。如下</p><div class="tag-plugin tabs"id="tab_4"><div class="nav-tabs"><div class="tab active"><a href="#tab_4-1">store/index.js</a></div><div class="tab"><a href="#tab_4-2">vue组件调用</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_4-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br><span class="hljs-attr">mutations</span>: &#123;<br>  increment (state, payload) &#123;<br>    state.<span class="hljs-property">count</span> += payload.<span class="hljs-property">amount1</span>;<br>     state.<span class="hljs-property">count</span> += payload.<span class="hljs-property">amount2</span>;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_4-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>, &#123;<br>  <span class="hljs-attr">amount1</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">amount2</span>:<span class="hljs-number">20</span><br>&#125;)<br></code></pre></td></tr></table></figure><!-- endtab --></div></div></div><div class="tag-plugin note" color="cyan"><div class="body"><p>当然，当只有一个参数时直接使用即可。</p></div></div><p>现在我们再来看一下父组件App.vue的代码，会发现他已经没有任何有关兄弟组件通信的代码了，即此时父组件无需在承担这个桥梁者的身份了，更加简洁优雅。第三方桥梁者身份由vuex来提供了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;!-- 传递给子组件Tab的值以及为他绑定一个方法用来通知父组件更新值 --&gt;<br>    &lt;!-- &lt;Tab :curIdx=&quot;curIdx&quot; @changeTab=&quot;changeTab&quot; /&gt; --&gt;<br>    &lt;!-- 不在需要传递curIdx了 --&gt;<br>     &lt;!-- &lt;Tab @changeTab=&quot;changeTab&quot; /&gt; --&gt;<br>     &lt;!-- 也无需在为子组件提供方法了 --&gt;<br>     &lt;Tab /&gt;<br>    &lt;!-- Page组件也接受这个curIdx值 --&gt;<br>    &lt;!-- &lt;Page :curIdx=&quot;curIdx&quot;&gt;&lt;/Page&gt; --&gt;<br>    &lt;!-- 不在需要传递curIdx了 --&gt;<br>    &lt;Page &gt;&lt;/Page&gt;<br>    &lt;!-- &lt;img src=&quot;./assets/logo.png&quot;&gt; --&gt;<br>    &lt;!-- &lt;router-view/&gt; --&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Tab from &quot;@/components/Tab&quot;;<br>import Page from &quot;@/components/Page&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  components: &#123;<br>    Tab,<br>    Page,<br>  &#125;,<br>  // 无需在定义curIdx了<br>  // data() &#123;<br>  //   return &#123;<br>  //     curIdx: 0,<br>  //   &#125;;<br>  // &#125;,<br>  // 无需在定义这个方法了<br>  // methods: &#123;<br>  //   changeTab(i) &#123;<br>  //     this.curIdx = i;<br>  //   &#125;,<br>  // &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: &quot;Avenir&quot;, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  /* text-align: center; */<br>  color: #2c3e50;<br>  margin-top: 60px;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h4 id="getters使用"><a class="markdownIt-Anchor" href="#getters使用"></a> getters使用</h4><p>实际上getters很好理解，他就是把对数据的多重操作不再在组件中使用computed进行封装返还，而是可以在vuex中使用getters即可得到。还是之前的那个例子，现在我希望下方的页面可以实时显示一句话即 <code>当前显示的时第curIdx个标签对应的页面的内容</code>。这句话很明显需要随时跟着curIdx变动更新，我们第一想法就是获取到这个curIdx然后再在page组件中新声明一个计算元素来生成这句话，但是我们其实可以完全在getters就是先这个功能，这样类似需求的组件就无需再重复写这种计算方法了，而是都可以通过getters统一拿到这个随时变化的字符串，首先我们需要在store/index.js中声明一个getters方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">// 由于是插件，因此需要将其挂载到vue上</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 注意返还的是一个vuex的仓库对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// 里面包含之前介绍的几个属性</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-comment">// 用来维护通信使用的数据</span><br>    <span class="hljs-attr">curIdx</span>: <span class="hljs-number">1</span>,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>:&#123;<br>    <span class="hljs-comment">//   形参和mutations类似，第一个永远是state,第二个是payload</span><br>    <span class="hljs-title function_">content</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`当前显示的时第<span class="hljs-subst">$&#123;state.curIdx&#125;</span>个标签对应的页面的内容`</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 用来定义修改state中数据的方法</span><br>    <span class="hljs-comment">// 用来修改state中的curIdx</span><br>    <span class="hljs-comment">// 默认第一个参数永远是state</span><br>    <span class="hljs-title function_">setCurIdx</span>(<span class="hljs-params">state, idx</span>) &#123;<br>      state.<span class="hljs-property">curIdx</span> = idx;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">// 异步操作</span><br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-comment">// 分模块引入</span><br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>类似的，gettes中的方法返还的值和state中的值一样也有两种接受方法</p><h5 id="方法一-3"><a class="markdownIt-Anchor" href="#方法一-3"></a> 方法一</h5><p>第一种就是直接在html中双括号中引入即可，由于vuex中的数据也是动态响应的，因此从getters中获取的数据也是动态的，当源数据发生了变化，他也会跟着变化。如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- &lt;div&gt;&#123;&#123; content[curIdx - 1] &#125;&#125;&lt;/div&gt; --&gt;<br>  &lt;div&gt;&#123;&#123; this.$store.getters.content &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br><br>&lt;script&gt;<br>import &#123; mapState &#125; from &quot;vuex&quot;;<br>export default &#123;<br>  name: &quot;Page&quot;,<br>  // 不在需要使用prop接受值<br>  // props: &#123;<br>  //   curIdx: Number,<br>  // &#125;,<br>  computed: &#123;<br>    //要注意其本身是一个计算函数，因此外部有一个括号包裹<br>    ...mapState(&#123;<br>      // 箭头函数可使代码更简练<br>      curIdx: (state) =&gt; state.curIdx,<br>      // 下面这种书写也可以<br>      // curIdx:&#x27;curIdx&#x27;,<br>    &#125;),<br>    // 当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组<br>    // ...mapState([&#x27;curIdx&#x27;])<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      // 根据prop接收的curIdx动态显示内容<br>      content: [&quot;页面1&quot;, &quot;页面2&quot;, &quot;页面3&quot;, &quot;页面4&quot;],<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>最终得到的效果图就是下方的内容会实时根据上方被选中的a标签发生变化</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211212195342.png" alt="" /></p><h5 id="方法二-3"><a class="markdownIt-Anchor" href="#方法二-3"></a> 方法二</h5><p>当然我们也可以借助 <code>mapGetters</code>辅助函数，同样的由于同时动态变化的，我们需要将其映射到computed属性下，此时组件就可以任意使用这个值了。如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- &lt;div&gt;&#123;&#123; content[curIdx - 1] &#125;&#125;&lt;/div&gt; --&gt;<br>  &lt;!-- &lt;div&gt;&#123;&#123; this.$store.getters.content &#125;&#125;&lt;/div&gt; --&gt;<br>  &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br><br>&lt;script&gt;<br>import &#123; mapState &#125; from &quot;vuex&quot;;<br>import &#123;mapGetters&#125; from &#x27;vuex&#x27;<br>export default &#123;<br>  name: &quot;Page&quot;,<br>  // 不在需要使用prop接受值<br>  // props: &#123;<br>  //   curIdx: Number,<br>  // &#125;,<br>  computed: &#123;<br>    //要注意其本身是一个计算函数，因此外部有一个括号包裹<br>    ...mapState(&#123;<br>      // 箭头函数可使代码更简练<br>      curIdx: (state) =&gt; state.curIdx,<br>      // 下面这种书写也可以<br>      // curIdx:&#x27;curIdx&#x27;,<br>    &#125;),<br>    // 当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组<br>    // ...mapState([&#x27;curIdx&#x27;])<br>    // 由于下方已经存在了一个content数组，为了不重名我们需要修改一下这个getters返还的值名称为msg<br>    ...mapGetters(&#123;<br>      msg:&#x27;content&#x27;<br>    &#125;)<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      // 根据prop接收的curIdx动态显示内容<br>      content: [&quot;页面1&quot;, &quot;页面2&quot;, &quot;页面3&quot;, &quot;页面4&quot;],<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h4 id="actions使用"><a class="markdownIt-Anchor" href="#actions使用"></a> actions使用</h4><p>首先我们要知道actions的作用时用来处理异步操作的，但是什么是异步操作呢？所谓异步就是当执行这个代码以后程序并不会等待其成功结束并返还结果以后再继续向下走，而是这个异步操作自己去一边运行而主程序继续向下执行后面的代码，当之前的代码完成后再处理返还结果，这就是异步，而同步就是必须等待之前的代码成功运行并返还以后再向下执行代码。很显然setTimeout以及主流的接口调用获取数据的代码都是异步操作，这是因为以防出现阻塞以及页面长时间加载空白的问题。但是为什么这些异步操作要在actions中执行而不能再mutations中执行呢？这是因为vue官方插件专门提供了一个调试区域可以实时跟踪并显示vuex中state的值，但是如果mutations中的方法出现异步操作可能会造成跟踪出现异常。</p><p>如果你还没有vuex官方插件，可以点击下方链接前往极简插件商城下载</p><div class="tag-plugin link dis-select"><a class="link-card plain" title="vue插件下载" href="https://chrome.zzzmh.cn/info?token=nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="icon"><div class="left"><span class="title">vue插件下载</span><span class="cap link fs12">https://chrome.zzzmh.cn/info?token=nhdogjmejiglipccpnnnanhbledajbpd</span></div><div class="right"><div class="lazy img" data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.4/link/8f277b4ee0ecd.svg"></div></div></a></div><p>这里我们举一个小例子，加入现在我们并不像setCurIdx的值立刻更新，而是等待1s后在更新。现在我们将延时函数setTimeout写到mutations内部如下</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211212201139.png" alt="" /></p><p>实际上此时vuex内部的curIdx就4，但是这个插件跟踪出现了异常，为了避免这种情况的发生，我们需要将异步操作放置到actions中，但是actions中并不能直接操作state中的数据，因此他需要等待1s以后调用mutations中的方法进行state中curIdx值的更新，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">// 由于是插件，因此需要将其挂载到vue上</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 注意返还的是一个vuex的仓库对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// 里面包含之前介绍的几个属性</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-comment">// 用来维护通信使用的数据</span><br>    <span class="hljs-attr">curIdx</span>: <span class="hljs-number">1</span>,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-comment">//   形参和mutations类似，第一个永远是state,第二个是payload</span><br>    <span class="hljs-title function_">content</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`当前显示的时第<span class="hljs-subst">$&#123;state.curIdx&#125;</span>个标签对应的页面的内容`</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 用来定义修改state中数据的方法</span><br>    <span class="hljs-comment">// 用来修改state中的curIdx</span><br>    <span class="hljs-comment">// 默认第一个参数永远是state</span><br>    <span class="hljs-title function_">setCurIdx</span>(<span class="hljs-params">state, idx</span>) &#123;<br>      state.<span class="hljs-property">curIdx</span> = idx;<br>      <span class="hljs-comment">//   z这种异步操作在mutations中要避免</span><br>      <span class="hljs-comment">//   setTimeout(()=&gt;&#123;</span><br>      <span class="hljs-comment">//     state.curIdx = idx;</span><br>      <span class="hljs-comment">//   &#125;, 1000)</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">// 异步操作</span><br>    <span class="hljs-comment">// 注意第一个形参不是state而是context即this.$store因此后面可以跟commit调用mutattions中的函数</span><br>    <span class="hljs-title function_">updateCurIdx</span>(<span class="hljs-params">context, idx</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setCurIdx&#x27;</span>, idx);<br>      &#125;,<span class="hljs-number">1000</span>)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-comment">// 分模块引入</span><br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>此时我们还需要更改Tab中的代码让其不再直接调用setCurIdx()而是调用updateCurIdx()，这里同样有两种方法。</p><h5 id="方法一-4"><a class="markdownIt-Anchor" href="#方法一-4"></a> 方法一</h5><p>直接通过 <code>this.$store.dispatch.updateCurIdx()</code>实现，这里的dispatch作用和mutations中的commit类似，意为调用触发vuex中指定的方法，因此同样第一个参数是方法名，第二个参数是传值对象payload。此时Tab组件代码修改为</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211212202617.png" alt="" /></p><h5 id="方法二-4"><a class="markdownIt-Anchor" href="#方法二-4"></a> 方法二</h5><p>类似的就是借用 <code>mapActions</code>辅助函数啦，如下映射到methods即可了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;!-- 不在使用prop而是使用this.$store.state.curIdx获取 --&gt;<br>    &lt;!-- 由于vue中template无需使用this --&gt;<br>    &lt;!-- 因此直接使用$store.state.curIdx即可 --&gt;<br>    &lt;!-- 由于setCurIdx已经映射为了自己的方法因此直接调用即可 --&gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;updateCurIdx(1)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 1 &#125;]&quot;<br>    &gt;<br>      选项1&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;updateCurIdx(2)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 2 &#125;]&quot;<br>    &gt;<br>      选项2&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;updateCurIdx(3)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 3 &#125;]&quot;<br>    &gt;<br>      选项3&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;updateCurIdx(4)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 4 &#125;]&quot;<br>    &gt;<br>      选项4&lt;/a<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br><br>&lt;script&gt;<br>import &#123; mapMutations &#125; from &quot;vuex&quot;;<br>import &#123;mapActions&#125; from &#x27;vuex&#x27;<br>export default &#123;<br>  name: &quot;Tab&quot;,<br>  //接收父组件传递进来的curIdx的值<br>  // props: &#123;<br>  //   curIdx: Number,<br>  // &#125;,<br>  //点击触发父组件更新curIdx值<br>  methods: &#123;<br>    // 使用映射的方法获取setCurIdx方法<br>    ...mapMutations([&quot;setCurIdx&quot;]),<br>    // 映射引入actions<br>    ...mapActions([&#x27;updateCurIdx&#x27;]),<br>    // changeTab(i) &#123;<br>    //   this.$emit(&quot;changeTab&quot;, i);<br>    // &#125;,<br><br>    //  当然也可以不映射，而是直接调用this.$store.mutations.setCurIdx()修改<br>    // setCurIdx(idx) &#123;<br>    //   this.$store.commit(&quot;setCurIdx&quot;, idx);<br>    // &#125;,<br><br>    //我们甚至可以进一步封装将setCurIdx改个名字<br>    // ...mapMutations([&#x27;setCurIdx&#x27;]),<br>    // changeTab(idx)&#123;<br>    //   this.setCurIdx(idx);<br>    // &#125;<br><br>    // updateCurIdx(idx) &#123;<br>    //   this.$store.dispatch(&quot;updateCurIdx&quot;, idx);<br>    // &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>a &#123;<br>  margin-right: 10px;<br>&#125;<br>.current &#123;<br>  color: #000;<br>  text-decoration: none;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h5 id="应用实战"><a class="markdownIt-Anchor" href="#应用实战"></a> 应用实战</h5><p>但是实际上我们大部分场景用不到setTimeout异步函数来操作vuex中的数据，更常见的是通过fetch、ajax或者axios拿去数据来为vuex中的值进行初始化，由于这些操作都是异步的，因此我们需要在actions中执行这些请求操作，获取到响应请求数据后再通过调用mutations中的方法来为state中的值进行初始化赋值。现在我们假设一开始并不知道哪一个a标签被选中，即curIdx值并不确定，我们需要通过一个api从后台去获取这个初始值，此时我们就会用到异步请求函数，假设curIdx初始值是3，我们现在需要调用接口 <code>/init</code>来获取到这个初始curIdx值，由于我们没有后台，因此使用axios+mock.js的方式来演示，首先我们需要安装axios</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install axios --save<br></code></pre></td></tr></table></figure><p>然后我们在main.js中全局引入axios并挂载到vue的原型上，这样我们在任意位置处都可以使用axios请求函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入axios</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-comment">// 挂载到vue原型链上</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">axios</span> = axios;<br></code></pre></td></tr></table></figure><p>然后我们再在根目录下创建一个axios文件夹并且在文件夹下创建index.js用来返还使用接口请求函数同时创建一个api.js用来存放具体的请求函数内容如下图</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211212204709.png" alt="" /></p><p>然后我们在两个文件中加入如下代码来向外暴露一个请求数据的方法这样子写的好处是当我们需要进行许多数据的请求时都只需要在这里定义好请求方法，然后组件一行调用这个向外暴露的方法即可，既保证了组件内部没有具体的请求函数内容，简洁优雅，同时所有的具体请求内容都放置到了api.js中方便后期维护（从此不再需要去组件中的各个位置去修改请求代码了😎）</p><div class="tag-plugin tabs"id="tab_5"><div class="nav-tabs"><div class="tab active"><a href="#tab_5-1">index.js</a></div><div class="tab"><a href="#tab_5-2">api.js</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_5-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 读取api.js内部定义的请求方法</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> apis <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./api.js&#x27;</span><br><span class="hljs-comment">// 暴露给外部以便调用，此时所有的api方法整合到了一起形成一个对象命名为apis</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> apis<br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_5-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br> <br><span class="hljs-comment">// 默认接口头部公有的ip地址，由于这里是本机假请求并使用mock.js拦截返还</span><br><span class="hljs-comment">// 因此使用本地回环地址127.0.0.1同时默认是80端口</span><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&#x27;http://127.0.0.1:80&#x27;</span>;<br><span class="hljs-comment">//该地址就叫URL（Uniform Resource Locator,统一资源定位器）</span><br><span class="hljs-comment">//Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</span><br><span class="hljs-comment">//API（Application Programming Interface，应用程序接口）</span><br><br><span class="hljs-comment">// 没有传递的参数</span><br><span class="hljs-comment">// 使用gei或者post都可以，我这里使用get请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">initData</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/initData&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><!-- endtab --></div></div></div><p>然后我们再安装mock.js和<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&amp;q=axios">axios</a>-mock-adapter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install mockjs --save<br><span class="hljs-comment">//用来模拟仿真请求返回，可以拦截并解析得到去除ip后的路径</span><br>npm install axios-mock-adapter --save-dev         <span class="hljs-comment">//开发环境依赖</span><br></code></pre></td></tr></table></figure><p>然后为了方便管理我们再在根目录下新建一个mock文件夹并新建index.js用来存放所有的mock拦截函数，然后我们再在mock文件夹下创建一个data文件夹，其内部再创建一个data.js用来存储具体的初始化数据如下图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211212205839.png" alt="" /></p><p>我们分别在各个文件中加入如下代码</p><div class="tag-plugin tabs"id="tab_6"><div class="nav-tabs"><div class="tab active"><a href="#tab_6-1">index.js</a></div><div class="tab"><a href="#tab_6-2">data/data.js</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_6-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 通过axios-mock-adapter生成代理api地址，可以模拟后台的数据返还</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MockAdapter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios-mock-adapter&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123;<br>  initData<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data/data.js&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// 第一个拦截返还函数</span><br>  <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 新建一个拦截对象</span><br>    <span class="hljs-keyword">let</span> mock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockAdapter</span>(axios);<br>    mock.<span class="hljs-title function_">onGet</span>(<span class="hljs-string">&#x27;/initData&#x27;</span>).<span class="hljs-title function_">reply</span>(<br>      <span class="hljs-comment">// 无传进来的参数，因此是无参箭头函数</span><br>      <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//   如果时有参数的请求，那么可以在这里进行解析</span><br>        <span class="hljs-comment">// 返还一个Promise对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">//   resolve表示成功返还</span><br>          <span class="hljs-comment">//   是一个数组，其中第一个200是返还数据的头部信息状态code</span><br>          <span class="hljs-title function_">resolve</span>([<span class="hljs-number">200</span>, &#123;<br>            <span class="hljs-comment">//   这里供开发者使用</span><br>            <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>            <span class="hljs-comment">// 重点是要将初始的数据拿过来</span><br>            initData,<br>          &#125;]);<br>        &#125;)<br>      &#125;<br>    )<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_6-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 设置为常量不能被修改</span><br><span class="hljs-keyword">const</span> initData=&#123;<br>    <span class="hljs-attr">curIdx</span>:<span class="hljs-number">3</span><br>&#125;<br><span class="hljs-comment">// 向外暴露</span><br><span class="hljs-keyword">export</span> &#123;initData&#125;<br></code></pre></td></tr></table></figure><!-- endtab --></div></div></div><p>拦截函数完成以后我们同样在main.js中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入这个对象</span><br><span class="hljs-comment">//默认引入mock文件夹下入口js文件index.js返还的对象</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../mock&#x27;</span><br><span class="hljs-comment">// 加入init拦截函数</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">init</span>();<br></code></pre></td></tr></table></figure><p>此时我们已经完成了请求axios和拦截响应模块的准备，接下来我们进行演示，首先我们需要自定义一个新的actions函数同时他会调用axios向外暴露的请求函数initData，当请求成功发送后会被mock.js拦截然后返还响应，我们这里可以先打印一下返还信息res如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">//默认引入index.js下的向外暴露的apis对象</span><br><span class="hljs-comment">// 引入这个这个包含了所有请求函数的对象</span><br><span class="hljs-keyword">import</span> apis <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../axios&#x27;</span><br><span class="hljs-comment">// 由于是插件，因此需要将其挂载到vue上</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 注意返还的是一个vuex的仓库对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// 里面包含之前介绍的几个属性</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-comment">// 用来维护通信使用的数据</span><br>    <span class="hljs-attr">curIdx</span>: <span class="hljs-number">1</span>,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-comment">//   形参和mutations类似，第一个永远是state,第二个是payload</span><br>    <span class="hljs-title function_">content</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`当前显示的时第<span class="hljs-subst">$&#123;state.curIdx&#125;</span>个标签对应的页面的内容`</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 用来定义修改state中数据的方法</span><br>    <span class="hljs-comment">// 用来修改state中的curIdx</span><br>    <span class="hljs-comment">// 默认第一个参数永远是state</span><br>    <span class="hljs-title function_">setCurIdx</span>(<span class="hljs-params">state, idx</span>) &#123;<br>      state.<span class="hljs-property">curIdx</span> = idx;<br>      <span class="hljs-comment">//   z这种异步操作在mutations中要避免</span><br>      <span class="hljs-comment">//   setTimeout(()=&gt;&#123;</span><br>      <span class="hljs-comment">//     state.curIdx = idx;</span><br>      <span class="hljs-comment">//   &#125;, 1000)</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">// 异步操作</span><br>    <span class="hljs-comment">// 注意第一个形参不是state而是context即this.$store因此后面可以跟commit调用mutattions中的函数</span><br>    <span class="hljs-title function_">updateCurIdx</span>(<span class="hljs-params">context, idx</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setCurIdx&#x27;</span>, idx);<br>      &#125;, <span class="hljs-number">1000</span>)<br>    &#125;,<br>    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 调用它的initData()方法进行初始化</span><br>      apis.<span class="hljs-title function_">initData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>      &#125;);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-comment">// 分模块引入</span><br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>然后我们在Tab组件中的created钩子函数下触发这个actions函数，如果能够成功被拦截那么控制台将会打印返还信息如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;!-- 不在使用prop而是使用this.$store.state.curIdx获取 --&gt;<br>    &lt;!-- 由于vue中template无需使用this --&gt;<br>    &lt;!-- 因此直接使用$store.state.curIdx即可 --&gt;<br>    &lt;!-- 由于setCurIdx已经映射为了自己的方法因此直接调用即可 --&gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;updateCurIdx(1)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 1 &#125;]&quot;<br>    &gt;<br>      选项1&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;updateCurIdx(2)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 2 &#125;]&quot;<br>    &gt;<br>      选项2&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;updateCurIdx(3)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 3 &#125;]&quot;<br>    &gt;<br>      选项3&lt;/a<br>    &gt;<br>    &lt;a<br>      href=&quot;javascript:;&quot;<br>      @click=&quot;updateCurIdx(4)&quot;<br>      :class=&quot;[&#123; current: $store.state.curIdx === 4 &#125;]&quot;<br>    &gt;<br>      选项4&lt;/a<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br><br>&lt;script&gt;<br>import &#123; mapMutations &#125; from &quot;vuex&quot;;<br>import &#123;mapActions&#125; from &#x27;vuex&#x27;<br>export default &#123;<br>  name: &quot;Tab&quot;,<br>  //调用actions进行curIndex的初始化<br>  created() &#123;<br>    this.$store.dispatch(&quot;init&quot;);<br>  &#125;,<br>  //接收父组件传递进来的curIdx的值<br>  // props: &#123;<br>  //   curIdx: Number,<br>  // &#125;,<br>  //点击触发父组件更新curIdx值<br>  methods: &#123;<br>    // 使用映射的方法获取setCurIdx方法<br>    ...mapMutations([&quot;setCurIdx&quot;]),<br>    // 映射引入actions<br>    ...mapActions([&#x27;updateCurIdx&#x27;]),<br>    // changeTab(i) &#123;<br>    //   this.$emit(&quot;changeTab&quot;, i);<br>    // &#125;,<br><br>    //  当然也可以不映射，而是直接调用this.$store.mutations.setCurIdx()修改<br>    // setCurIdx(idx) &#123;<br>    //   this.$store.commit(&quot;setCurIdx&quot;, idx);<br>    // &#125;,<br><br>    //我们甚至可以进一步封装将setCurIdx改个名字<br>    // ...mapMutations([&#x27;setCurIdx&#x27;]),<br>    // changeTab(idx)&#123;<br>    //   this.setCurIdx(idx);<br>    // &#125;<br><br>    // updateCurIdx(idx) &#123;<br>    //   this.$store.dispatch(&quot;updateCurIdx&quot;, idx);<br>    // &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>a &#123;<br>  margin-right: 10px;<br>&#125;<br>.current &#123;<br>  color: #000;<br>  text-decoration: none;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>控制台出现下图即说明成功！</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211212215043.png" alt="" /></p><p>很明显data中是我们需要的数据，因此我们在actions中的init函数中进行解析然后调用setCurIdx进行state中的curIdx赋值就行了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">init</span>(<span class="hljs-params">context</span>) &#123;<br>      <span class="hljs-comment">// 调用它的initData()方法进行初始化</span><br>      apis.<span class="hljs-title function_">initData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>        context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setCurIdx&#x27;</span>,res.<span class="hljs-property">data</span>.<span class="hljs-property">initData</span>.<span class="hljs-property">curIdx</span>)<br>      &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><p>自此我们就完成了vuex中curIdx的异步调用请求接口进行初始化的工作，我们会发现刷新页面以后默认被选中的标签就是第三个同时下方的内容也是第三个内容</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211212215538.png" alt="" /></p><p>这就是一个典型的异步请求数据并初始化的流程，同时我们还熟悉了标准的axios和mock.js的使用。</p><h5 id="关于异步执行的问题"><a class="markdownIt-Anchor" href="#关于异步执行的问题"></a> 关于异步执行的问题</h5><p>我们知道js在执行函数时是异步执行的，即解释器在执行触发函数的代码以后并不会像c一样等大函数执行完毕并返还结果再执行接下来的代码，而是让函数先执行，自己继续进行下面代码的解释和运行，即 <code>异步执行</code>。我们先看一个简单的例子，如下所示，我们希望在Tab中created声明钩子函数中调用的dispatch触发hello这个action异步函数以后可以等待函数执行完毕后返还true并给suc赋值，我们第一时间想到的代码就是：</p><div class="tag-plugin tabs"id="tab_7"><div class="nav-tabs"><div class="tab active"><a href="#tab_7-1">store/actions.js</a></div><div class="tab"><a href="#tab_7-2">Tab/index.vue</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_7-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 1s以后执行打印操作，然后返还true给suc赋值</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`hello`</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;,<span class="hljs-number">1000</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_7-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;init&quot;</span>);<br>    <span class="hljs-keyword">var</span> suc = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(suc);<br>  &#125;,<br></code></pre></td></tr></table></figure><!-- endtab --></div></div></div><p>我们会发现他返还给suc是一个Promise对象，但是这样并没有能够成功给suc赋值true</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211217091206.png" alt="" /></p><p>suc被初始化赋值成了一个Promise对象了，但是并没有达到我们的预期效果（我们是希望他变为布尔类型的true值）。可是我们从中可以发现actions函数触发执行完代码以后会返还一个Primise对象,这样的话我们是否可以直接调用then来进行同步等待后的赋值呢？如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;init&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;hello&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-keyword">var</span> suc=<span class="hljs-literal">true</span>;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(suc)<br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><p><img src="https://langwenchong.gitee.io/figure-bed/20211217093610.png" alt="" /></p><p>我们得到了预期的效果，此时我们可以利用Promise对象的特点在执行完成以后在执行then后面的函数进行赋值，即同步等待前面的函数执行完成以后我们再进行后面的代码。但是此时我们并不能接收到hello函数返还的参数，加入我们现在希望hello在返还’success’字符串以后才能给suc赋值true,那么此时我们仅仅使用actions默认返还的Promise对象明显做不到了，此时我们可以手动创建一个Promise返还对象并且使用resolve()函数传递我们要返还的值代码如下：</p><div class="tag-plugin tabs"id="tab_8"><div class="nav-tabs"><div class="tab active"><a href="#tab_8-1"> store/actions.js</a></div><div class="tab"><a href="#tab_8-2">Tab/index.vue</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_8-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//嵌套在最外面</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 1s以后执行打印操作，然后返还success给suc赋值</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`hello`</span>);<br>        <span class="hljs-comment">//手动加入执行完成后的resolve函数</span><br>        <span class="hljs-comment">// 这样后面的then可以捕捉到继续执行函数</span><br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;success&quot;</span>);<br>      &#125;, <span class="hljs-number">1000</span>);<br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_8-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;init&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;hello&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (data === <span class="hljs-string">`success`</span>) &#123;<br>        <span class="hljs-keyword">var</span> suc = <span class="hljs-literal">true</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(suc);<br>      &#125;<br>    &#125;);<br>  &#125;,<br></code></pre></td></tr></table></figure><!-- endtab --></div></div></div><p><img src="https://langwenchong.gitee.io/figure-bed/20211217094144.png" alt="" /></p><p>此时我们仅在hello方法返还success字符串变量以后才会对suc赋值为true,这样我们就可以根据不同的返还值执行不同的操作了。</p><div class="tag-plugin note" color="cyan"><div class="body"><p>要注意dispatch默认返还的是一个Promise对象，因此我们可以链式执行，同时可以和<code>async/await</code>结合使用来等待所有的异步操作完成以后再返还Promise对象。</p></div></div><p>我们知道async是声明一个函数f为异步函数，那么此时f的返回值将是一个Promise对象，因此后面可以接f.then()来进行链式操作并且在里面进行同步等待后的数据处理操作。同时await就是<code>async await</code>的简写，他会阻塞等待后面所接的异步函数执行完resolve后获取resolve返还值才继续执行下面的代码，即<code>同步等待</code>。要注意<strong>await只能放在async函数内部使用</strong></p><h6 id="思考await和then都可以完成同步等待执行后面的代码操作那么两者有何区别"><a class="markdownIt-Anchor" href="#思考await和then都可以完成同步等待执行后面的代码操作那么两者有何区别"></a> 思考：await和.then都可以完成同步等待执行后面的代码操作，那么两者有何区别？</h6><p>await可以实现正常的表达式赋值，如下两者是等价的</p><div class="tag-plugin tabs"id="tab_9"><div class="nav-tabs"><div class="tab active"><a href="#tab_9-1">.then实现</a></div><div class="tab"><a href="#tab_9-2">await实现</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_9-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//f会返还Promise对象，异步函数</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>)<br>&#125;<br><span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>    f.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>        <span class="hljs-comment">//接下来给suc赋值true</span><br>        <span class="hljs-keyword">var</span> suc=data<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_9-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>     <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>)<br>&#125;<br><span class="hljs-comment">//注意此时test需要声明为async，这样其内部才能使用await</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//同样实现了给suc赋值true</span><br>    <span class="hljs-keyword">var</span> suc=<span class="hljs-keyword">await</span> <span class="hljs-title function_">f</span>();<br>&#125;<br></code></pre></td></tr></table></figure><!-- endtab --></div></div></div><p>那么我们在多重actions方法调用的情况下也可以使用这两个关键字完成<code>等待所有的异步函数执行完成后返还Promise的操作</code>如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 假设 getData() 和 getOtherData() 返回的是 Promise</span><br><br><span class="hljs-attr">actions</span>: &#123;<br>  <span class="hljs-comment">//actions A会等待getData这个异步函数resolve()后再返还Promise</span><br>  <span class="hljs-keyword">async</span> actionA (&#123; commit &#125;) &#123;<br>    <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;gotData&#x27;</span>, <span class="hljs-keyword">await</span> <span class="hljs-title function_">getData</span>())<br>  &#125;,<br>  <span class="hljs-keyword">async</span> actionB (&#123; dispatch, commit &#125;) &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;actionA&#x27;</span>) <span class="hljs-comment">// 等待 actionA 完成返还Promise</span><br>    <span class="hljs-comment">//同时还要等待getOtherData()方法也resolve()返还Promise</span><br>    <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;gotOtherData&#x27;</span>, <span class="hljs-keyword">await</span> <span class="hljs-title function_">getOtherData</span>())<br>    <span class="hljs-comment">//只有如上的所有等待异步函数全部返还后actionB才会返还Promise</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们就实现了actionB同步等待函数内部的两行代码出发的所有异步函数全部执行完成以后再返还Promise的操作了。</p><h4 id="文件结构整理"><a class="markdownIt-Anchor" href="#文件结构整理"></a> 文件结构整理</h4><p>现在我们已经掌握了vuex的基础操作，但是此时的所有有关vuex的属性全部都是存储都一个store/index.js文件下，这样子的目录结构很不合理，只能适用于简单的项目中，为了能够方便管理，并且在项目后期规模日渐庞大的情况下易于维护，我们通常会将这几个属性分别使用一个js文件来存储，然后统一引入到index.js中。这样我们就需要创建几个新的js文件分别是state.js、mutations.js、getters.js、actions.js(当然modules也可以独立存储到一个modules.js中)如下所示</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211213135123.png" alt="" /></p><div class="tag-plugin tabs"id="tab_10"><div class="nav-tabs"><div class="tab active"><a href="#tab_10-1">index.js</a></div><div class="tab"><a href="#tab_10-2">state.js</a></div><div class="tab"><a href="#tab_10-3">getters.js</a></div><div class="tab"><a href="#tab_10-4">mutations.js</a></div><div class="tab"><a href="#tab_10-5">actions.js</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_10-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><br><span class="hljs-comment">// 由于是插件，因此需要将其挂载到vue上</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 引入各个属性对象</span><br><span class="hljs-keyword">import</span> state <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./state&#x27;</span>;<br><span class="hljs-keyword">import</span> getters <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./getters&#x27;</span><br><span class="hljs-keyword">import</span> mutations <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mutations&#x27;</span><br><span class="hljs-keyword">import</span> actions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./actions&#x27;</span><br><br><span class="hljs-comment">// 注意返还的是一个vuex的仓库对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// 里面包含之前介绍的几个属性</span><br>  <span class="hljs-attr">state</span>: state,<br>  <span class="hljs-attr">getters</span>: getters,<br>  <span class="hljs-attr">mutations</span>: mutations,<br>  <span class="hljs-attr">actions</span>: actions,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-comment">// 分模块引入</span><br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_10-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// 用来维护通信使用的数据</span><br>  <span class="hljs-attr">curIdx</span>: <span class="hljs-number">1</span>,<br>&#125;<br><br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_10-3"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">//   形参和mutations类似，第一个永远是state,第二个是payload</span><br>  <span class="hljs-title function_">content</span>(<span class="hljs-params">state</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`当前显示的时第<span class="hljs-subst">$&#123;state.curIdx&#125;</span>个标签对应的页面的内容`</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_10-4"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// 用来定义修改state中数据的方法</span><br>  <span class="hljs-comment">// 用来修改state中的curIdx</span><br>  <span class="hljs-comment">// 默认第一个参数永远是state</span><br>  <span class="hljs-title function_">setCurIdx</span>(<span class="hljs-params">state, idx</span>) &#123;<br>    state.<span class="hljs-property">curIdx</span> = idx;<br>    <span class="hljs-comment">//   z这种异步操作在mutations中要避免</span><br>    <span class="hljs-comment">//   setTimeout(()=&gt;&#123;</span><br>    <span class="hljs-comment">//     state.curIdx = idx;</span><br>    <span class="hljs-comment">//   &#125;, 1000)</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_10-5"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//默认引入index.js下的向外暴露的apis对象</span><br><span class="hljs-comment">// 引入这个这个包含了所有请求函数的对象</span><br><span class="hljs-keyword">import</span> apis <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../axios&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// 异步操作</span><br>  <span class="hljs-comment">// 注意第一个形参不是state而是context即this.$store因此后面可以跟commit调用mutattions中的函数</span><br>  <span class="hljs-title function_">updateCurIdx</span>(<span class="hljs-params">context, idx</span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setCurIdx&#x27;</span>, idx);<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;,<br>  <span class="hljs-title function_">init</span>(<span class="hljs-params">context</span>) &#123;<br>    <span class="hljs-comment">// 调用它的initData()方法进行初始化</span><br>    apis.<span class="hljs-title function_">initData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>      context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setCurIdx&#x27;</span>, res.<span class="hljs-property">data</span>.<span class="hljs-property">initData</span>.<span class="hljs-property">curIdx</span>)<br>    &#125;);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><!-- endtab --></div></div></div><p>按照如上的文件结构来存储可以方便管理，因为伴随着项目的开发，每一个属性下面都会存在大量的数据、方法。</p><h4 id="modules使用"><a class="markdownIt-Anchor" href="#modules使用"></a> modules使用</h4><p>接下来我们再学习一下modules属性，它通常会在多人合作的企业项目中使用。我们现在考虑一个问题，某一个项目会根据功能模块进行划分，然后每一个开发人员负责一个模块的划分，此时毋庸置疑几个模块是并行开发的，最后再合并分支形成完整的项目。那么在开发过程中每一个开发人员都肯定会用到vuex，此时可能开发人员小明使用了一个count变量，并且还定义了setCount方法，而开发人员小红也自己定义了一个count变量，并且也定义了setCount方法，那么合并以后很明显会出现一个问题，即count到底属于哪一个功能模块？因此在合作开发中为了避免多个人使用的vuex存在大量重名变量而不知道归属的情况就引入了modules概念。它很好理解，解决的办法类似于vue中组件的使用，每一个人的vuex都有一个自己的文件夹存储自己需要的东西，然后我们按照模块导入使用即可，那么为了区分不同vuex模块中的同名变量和同名方法很明显我们需要为每一个模块都起一个独特的名字即 <code>命名空间</code>。</p><p>现在我们以一个例子来讲解如何使用modules，假设现在我们有两个加法器组件counter1和counter2，他们都使用了模块对应的vuex中的count变量，并且可以调用自己对应的vuex中mutations存储的addCount方法进行加操作，此时很显然我们希望两个加法器的count和setCount互不干扰，此时我们就需要使用modules属性了，首先我们需要建立两个新的vuex模块，只需要在store文件夹下建立两个新文件夹counter1和counter2同时这两个文件夹都有完整的vuex结构如下</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211213141247.png" alt="" /></p><p>首先给出counter1模块下的代码</p><div class="tag-plugin tabs"id="tab_11"><div class="nav-tabs"><div class="tab active"><a href="#tab_11-1">counter1/index.js</a></div><div class="tab"><a href="#tab_11-2">counter1/state.js</a></div><div class="tab"><a href="#tab_11-3">counter1/mutations.js</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_11-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> mutations <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./mutations&quot;</span>;<br><span class="hljs-keyword">import</span> state <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./state&quot;</span>;<br><br><span class="hljs-comment">// 要注意返还仅仅是一个对象，而不是new Vuex.store</span><br><span class="hljs-comment">// Vuex.store只会有一个</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">//开启命名空间。那么调用它的属性时需要加上名字前缀counter1</span><br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">state</span>: state,<br>  <span class="hljs-attr">mutations</span>: mutations,<br>&#125;<br><br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_11-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">count</span>:<span class="hljs-number">0</span>,<br>&#125;<br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_11-3"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setCount</span>(<span class="hljs-params">state, num</span>) &#123;<br>    state.<span class="hljs-property">count</span> += num;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><!-- endtab --></div></div></div><p>然后我们再给出counter2模块下的代码</p><div class="tag-plugin tabs"id="tab_12"><div class="nav-tabs"><div class="tab active"><a href="#tab_12-1">counter2/index.js</a></div><div class="tab"><a href="#tab_12-2">counter2/state.js</a></div><div class="tab"><a href="#tab_12-3">counter2/mutations.js</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_12-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> mutations <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./mutations&quot;</span>;<br><span class="hljs-keyword">import</span> state <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./state&quot;</span>;<br><br><span class="hljs-comment">// 要注意返还仅仅是一个对象，而不是new Vuex.store</span><br><span class="hljs-comment">// Vuex.store只会有一个</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">//开启命名空间。那么调用它的属性时需要加上名字前缀counter2</span><br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">state</span>: state,<br>  <span class="hljs-attr">mutations</span>: mutations,<br>&#125;<br><br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_12-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">count</span>:<span class="hljs-number">2</span>,<br>&#125;<br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_12-3"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">setCount</span>(<span class="hljs-params">state, num</span>) &#123;<br>      state.<span class="hljs-property">count</span> += num;<br>    &#125;<br>  &#125;<br>  <br></code></pre></td></tr></table></figure><!-- endtab --></div></div></div><div class="tag-plugin note" color="cyan"><div class="title">首先要注意模块的index.js返还的仅仅是个对象而不是store对象，同时命名空间属性是</div><div class="body"><p><code>namespaced</code>要设置为true</p></div></div><p>我们会发现这两个模块的数据和方法名称是相同的，但是我们为这两个模块的counter设置的初始值略有不同。然后我们将这两个模块引入到vuex中，只需要再store/index.js中引入这两个modules即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><br><span class="hljs-comment">// 由于是插件，因此需要将其挂载到vue上</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 引入各个属性对象</span><br><span class="hljs-keyword">import</span> state <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./state&#x27;</span>;<br><span class="hljs-keyword">import</span> getters <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./getters&#x27;</span><br><span class="hljs-keyword">import</span> mutations <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mutations&#x27;</span><br><span class="hljs-keyword">import</span> actions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./actions&#x27;</span><br><span class="hljs-comment">// 引入counter1和counter2两个模块</span><br><span class="hljs-keyword">import</span> counter1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./counter1&#x27;</span><br><span class="hljs-keyword">import</span> counter2 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./counter2&#x27;</span><br><span class="hljs-comment">// 注意返还的是一个vuex的仓库对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// 里面包含之前介绍的几个属性</span><br>  <span class="hljs-attr">state</span>: state,<br>  <span class="hljs-attr">getters</span>: getters,<br>  <span class="hljs-attr">mutations</span>: mutations,<br>  <span class="hljs-attr">actions</span>: actions,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-comment">// 分模块引入</span><br>    counter1,<br>    counter2,<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>此时我们再来编写两个加法器Counter1和Counter2他们分别使用对应vuex模块下的变量和方法。</p><div class="tag-plugin tabs"id="tab_13"><div class="nav-tabs"><div class="tab active"><a href="#tab_13-1">Counter1/index.vue</a></div><div class="tab"><a href="#tab_13-2">Counter2/index.vue</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_13-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Counter1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Counter1:&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setCount(1)&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; mapState, mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Counter1&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   注意，此时要额外再传一个参数即命名空间这里是counter1</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 后面的写法是一样的，数组或者对象形式都可以</span></span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&quot;counter1&quot;</span>, [<span class="hljs-string">&quot;count&quot;</span>]),</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapMutations</span>(<span class="hljs-string">&quot;counter1&quot;</span>, [<span class="hljs-string">&quot;setCount&quot;</span>]),</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><!-- endtab --></div><div class="tab-pane" id="tab_13-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2&gt;Counter2&lt;/h2&gt;<br>    &lt;div&gt;counter1:&#123;&#123; count &#125;&#125;&lt;/div&gt;<br>    &lt;button @click=&quot;setCount(2)&quot;&gt;add&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; mapState, mapMutations &#125; from &quot;vuex&quot;;<br>export default &#123;<br>  name: &quot;Counter2&quot;,<br>  computed: &#123;<br>    //   注意，此时要额外再传一个参数即命名空间这里是counter1<br>    // 后面的写法是一样的，数组或者对象形式都可以<br>    ...mapState(&quot;counter2&quot;, [&quot;count&quot;]),<br>  &#125;,<br>  methods: &#123;<br>    ...mapMutations(&quot;counter2&quot;, [&quot;setCount&quot;]),<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><!-- endtab --></div></div></div><p>这里的两个加法器也基本一样，但是要注意他们的映射辅助函数传进去的命名空间是不同的，同时我们规定加法器1每次按按钮只进行加一，而加法器2每一次按按钮是加二。然后我们再在App.vue中引入并使用这两个加法器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;!-- 传递给子组件Tab的值以及为他绑定一个方法用来通知父组件更新值 --&gt;<br>    &lt;!-- &lt;Tab :curIdx=&quot;curIdx&quot; @changeTab=&quot;changeTab&quot; /&gt; --&gt;<br>    &lt;!-- 不在需要传递curIdx了 --&gt;<br>    &lt;!-- &lt;Tab @changeTab=&quot;changeTab&quot; /&gt; --&gt;<br>    &lt;!-- 也无需在为子组件提供方法了 --&gt;<br>    &lt;Tab /&gt;<br>    &lt;!-- Page组件也接受这个curIdx值 --&gt;<br>    &lt;!-- &lt;Page :curIdx=&quot;curIdx&quot;&gt;&lt;/Page&gt; --&gt;<br>    &lt;!-- 不在需要传递curIdx了 --&gt;<br>    &lt;Page&gt;&lt;/Page&gt;<br>    &lt;!-- &lt;img src=&quot;./assets/logo.png&quot;&gt; --&gt;<br>    &lt;!-- &lt;router-view/&gt; --&gt;<br>    &lt;Counter1&gt;&lt;/Counter1&gt;<br>    &lt;Counter2&gt;&lt;/Counter2&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Tab from &quot;@/components/Tab&quot;;<br>import Page from &quot;@/components/Page&quot;;<br>// 引入两个加法器<br>import Counter1 from &quot;@/components/Counter1&quot;;<br>import Counter2 from &quot;@/components/Counter2&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  components: &#123;<br>    Tab,<br>    Page,<br>    Counter1,<br>    Counter2,<br>  &#125;,<br>  // 无需在定义curIdx了<br>  // data() &#123;<br>  //   return &#123;<br>  //     curIdx: 0,<br>  //   &#125;;<br>  // &#125;,<br>  // 无需在定义这个方法了<br>  // methods: &#123;<br>  //   changeTab(i) &#123;<br>  //     this.curIdx = i;<br>  //   &#125;,<br>  // &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: &quot;Avenir&quot;, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  /* text-align: center; */<br>  color: #2c3e50;<br>  margin-top: 60px;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>最后我们即可得到如下效果图，会发现上下两个加法器之间数据互不干扰</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211213145428.png" alt="" /></p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>自此我们基本上就掌握了大部分的vuex技能，同时用demo学习实战了如何进行vuex分模块的操作。最后强烈建议虽然映射的写法比较难以理解，但是理解后使用映射的方法更加优雅且易于维护，再真正的大型项目中强推分模块使用vuex！</p><p>如果您还有任何疑惑可以参考官方文档</p><div class="tag-plugin link dis-select"><a class="link-card plain" title="vuex文档" href="https://vuex.vuejs.org/zh/#%E4%BB%80%E4%B9%88%E6%98%AF-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="icon"><div class="left"><span class="title">vuex文档</span><span class="cap link fs12">https://vuex.vuejs.org/zh/#%E4%BB%80%E4%B9%88%E6%98%AF-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F</span></div><div class="right"><div class="lazy img" data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.4/link/8f277b4ee0ecd.svg"></div></div></a></div><p>同时这里左上方给出了上面博客演示时使用的代码，整理不易，如果喜欢还请转载时带上署名😣</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;vuex是一款针对vue.js中复杂的通信场景下衍生的技术插件，他可以有效的帮助我们轻松完成大范围内的组件通信，还不快进来学习😋？&lt;/p&gt;</summary>
    
    
    
    <category term="开发技能" scheme="https://coolchong.cn/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="vue" scheme="https://coolchong.cn/tags/vue/"/>
    
    <category term="vuex" scheme="https://coolchong.cn/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>浅谈vue项目部署到nginx</title>
    <link href="https://coolchong.cn/2021/10/18/nginx-web/"/>
    <id>https://coolchong.cn/2021/10/18/nginx-web/</id>
    <published>2021-10-18T10:32:42.000Z</published>
    <updated>2023-01-28T11:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>针对小白的快速前端vue项目打包部署教程，包含二级域名解析配置以及https认证等，还不赶快进来看看👀？</p><span id="more"></span><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>由于我最近写了一个基于vue实现的代码缺陷自动检测的前端项目，又恰巧买了一个腾讯云服务器，因此想借此机会尝试部署到nginx上，但是博客已经占用了 <code>coolchong.cn</code>域名，因此想尝试部署到二级域名上，但是查阅了csdn上众多 <code>水文</code>后，发现大部分内容实在是晦涩难懂、一言难尽😅。幸好chongchong最终耗时一晚成功部署到了服务器上，为了防止以后忘记，也为了让电脑前的你能够少走点弯路，因此诞生了这篇博文。</p><h3 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h3><p>在部署之前，我们需要进行一些准备工作，您可以参考我下方给出的清单:</p><div class="tag-plugin checkbox" color="cyan"><input type="checkbox" checked="true"/><span>拥有一个待部署的vue项目</span></div><div class="tag-plugin checkbox" color="cyan"><input type="checkbox" checked="true"/><span>拥有一个云服务器，最好是centOS6以上</span></div><div class="tag-plugin checkbox" color="green" symbol="plus"><input type="checkbox" checked="true"/><span>服务器上已经安装了nginx</span></div><div class="tag-plugin checkbox" color="green" symbol="plus"><input type="checkbox" checked="true"/><span>拥有一个域名</span></div><div class="tag-plugin checkbox" color="green" symbol="plus"><input type="checkbox" checked="true"/><span>拥有xshell和xftp软件</span></div><p>可能你还没有xshell和xftp软件，不用担心，你无需去冒着风险下载破解版本，NETSARANG公司已经提供了个人免费版本，你只需要点击下方链接简单填写姓名和邮件即可下载：</p><div class="tag-plugin link dis-select"><a class="link-card plain" title="xshell和xftp下载" href="https://www.netsarang.com/zh/free-for-home-school/" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="icon"><div class="left"><span class="title">xshell和xftp下载</span><span class="cap link fs12">https://www.netsarang.com/zh/free-for-home-school/</span></div><div class="right"><div class="lazy img" data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.4/link/8f277b4ee0ecd.svg"></div></div></a></div><p><img src="https://langwenchong.gitee.io/figure-bed/20211018185733.png" alt="" /></p><h3 id="vue项目打包"><a class="markdownIt-Anchor" href="#vue项目打包"></a> vue项目打包</h3><p>准备工作完成后我们首先要将待部署的vue项目进行打包，因为在我们开发时使用的是vue文件，方便进行热加载随时动态更新我们的修改，但是在部署到服务器后我们只需要放置静态的html资源即可，因此我们首先要进行vue的打包，打包步骤很简单，照着下面操作即可。</p><h4 id="1修改资源路径"><a class="markdownIt-Anchor" href="#1修改资源路径"></a> 1.修改资源路径</h4><p>我们首先打开 <code>config/index.js</code>文件，然后在build环境下加入 <code>assetsPublicPath:'./</code>如下图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018190331.png" alt="" /></p><p>然后为了保证静态的资源(包括图片，elementui组件的icon图标等）正常加载显示，我们需要打开 <code>build/utils.js</code>文件，然后在 <code>fallback</code>下加入 <code>publicPath:'../../'</code>如下图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018190624.png" alt="" /></p><h4 id="2关闭跨域代理"><a class="markdownIt-Anchor" href="#2关闭跨域代理"></a> 2.关闭跨域代理</h4><p>在开发时，我们为了解决前后端跨域问题，修改 <code>proxyTable</code>,但是部署到服务器后项目统一放置在一个文件件内，是无需在配置跨域代理，因此我们将 <code>config/index.js</code>文件的 <code>proxyTable</code>处的 <code>'/api'</code>后面的代码注释掉：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018204655.png" alt="" /></p><h4 id="3项目打包"><a class="markdownIt-Anchor" href="#3项目打包"></a> 3.项目打包</h4><p>新建终端，输入 <code>npm run biuld</code>打包项目，项目会生成一个index.html文件和一个用来存储静态依赖的static文件夹，统一放置在dist文件夹下如下图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018205119.png" alt="" /></p><p>自此我们就已经完成了vue项目的打包了，然后我们打开这个index.html查看能否正常显示页面，当不是一篇空白正常显示时即说明打包完成了。同时如果你是用了elementui组件库的话，请检查icon图标是否也能够正常显示。</p><h3 id="vue项目部署到nginx"><a class="markdownIt-Anchor" href="#vue项目部署到nginx"></a> vue项目部署到nginx</h3><p>接下来我们就需要通过xshell和xftp远程连接我们的服务器了，然后将打包好的dist文件夹放到特定的位置再修改一下nginx.conf文件的配置重启服务即可了。请参考下面步骤进行：</p><h4 id="1xshell连接远程服务器"><a class="markdownIt-Anchor" href="#1xshell连接远程服务器"></a> 1.xshell连接远程服务器</h4><p>首先如果你是第一次使用xshell的话需要新建一个会话，即记录一下这个会话连接的是你的那个服务器，如下图是配置界面：</p><p>①首先我们需要填写我们要连接的服务器的相关信息</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018205823.png" alt="" /></p><p>②然后我们点击用户身份验证，需要填写用来登录服务器的身份验证的账号和密码，这个根据你当时配置的账号名和密码填写即可：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018210017.png" alt="" /></p><p>③连接服务器</p><p>然后我们保存配置双击这个会话即会连接服务器，当成功连接以后会话界面左上角会呈现绿色，并且终端处于等待输入指令的状态：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018210732.png" alt="" /></p><h4 id="2xftp连接远程服务器"><a class="markdownIt-Anchor" href="#2xftp连接远程服务器"></a> 2.xftp连接远程服务器</h4><p>①首先配置也和xshell类似我们先新建一个会话，然后和xshell一样填写相关的配置信息：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018211152.png" alt="" /></p><p>②保存配置后双击连接服务器，如果成功后可以得到下图图示，左侧是当前本地电脑的文件目录，右侧是远程服务器的文件目录：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018211426.png" alt="" /></p><h4 id="3将dist文件夹放置到远程服务器"><a class="markdownIt-Anchor" href="#3将dist文件夹放置到远程服务器"></a> 3.将dist文件夹放置到远程服务器</h4><p>我们会发现这个服务器里有许多文件夹，那么dist文件夹放到哪里比较好呢？我推荐你和我一样，将所有我们上传的项目统一放到 <code>/home</code>路径下，如下图我的博客，还有前端项目都放到了这里：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018211643.png" alt="" /></p><p>为了方便区分多个文件夹，我们可以将dist更改名称易于区别，例如我这里的代码缺陷自动检测项目就是将dist文件夹更名为了compile文件夹。上传的文件的操作很简单，拖拽上传即可：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018211837.png" alt="" /></p><h4 id="4配置nginx二级域名解析"><a class="markdownIt-Anchor" href="#4配置nginx二级域名解析"></a> 4.配置nginx二级域名解析</h4><p>我们现在已经将项目文件夹放到了服务器上了，但是现在还不能通过域名解析访问到这个项目，因此接下来我们需要修改nginx配置。如果你还没有nginx也不用担心，上网百度一下安装即可，就是几行指令就轻松安装了。由于我已经使用了 <code>coolchong.cn</code>作为了博客的解析域名，因此这里我将演示如何部署到二级域名 <code>compile.wenchong.sapce</code>下，当然一级域名部署也类似。</p><p>①去dns解析平台新建二级域名，首先我们需要创建一个新的二级域名以便后面分配给这个项目，我用的是腾讯云，这里以腾讯云演示，登录腾讯云dns平台后进行域名解析管理，然后新建解析一定要保证是A类型，然后主机记录就是二级域名名称，线路类型默认就行，重点是记录值一定要填写服务器的公网ip如下图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018212807.png" alt="" /></p><p>②保存这个新添加的解析并且开启解析，然后我们去配置 <code>nginx.conf</code>，在xftp中按照 <code>/etc/nginx/</code>找到nginx.conf文件，然后右键以记事本形式打开，我们填写如下代码到最下方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>#监听端口号,一般就用80,别标新立异<br>        listen      80;<br>        #要分配的域名<br>        server_name compile.coolchong.cn; <br><br>#默认是根路径/<br>        location / &#123; <br>        #指向的项目文件夹就是我们刚刚传的dist文件夹的位置<br>            root    /home/compile;<br>            #入口文件，肯定是index.html啦<br>            index   index.html;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后保存退出，自此我们就完成了nginx的配置。</p><p>③重启nginx服务，由于我们修改了nginx的配置，因此我们要重启服务，打开xshell，输入以下指令首先进入到nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd /etc/nginx<br></code></pre></td></tr></table></figure><p>④然后我们输入如下指令检查nginx配置是否语法正确</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nginx -t<br></code></pre></td></tr></table></figure><p>如果没有语法错误则会出现如下信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /etc/nginx/nginx.conf test is successful<br></code></pre></td></tr></table></figure><p>⑤然后我们输入如下指令重启nginx服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">systemctl restart nginx.service<br></code></pre></td></tr></table></figure><p>当没有任何响应时及说明重启成功，然后我们输入刚刚填写的二级域名 <code>compile.coolchong.cn</code>会发现已经成功部署可以正常解析了：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018214020.png" alt="" />但是我们会发现有一点小问题，即上方提示此页面不安全，这是因为使用的是http而非https，当我们输入https开头时会发现无法正常加载，这是因此我们还没有为这个新的二级域名配置ssl证书，因此无法使用https。</p><h4 id="5为二级域名配置https选做"><a class="markdownIt-Anchor" href="#5为二级域名配置https选做"></a> 5.为二级域名配置https(选做)</h4><p>如果我们要追求完美，那么还需要再配置一下https的证书。操作很简单如下：</p><p>①前往腾讯云申请证书，腾讯云可以为我们提供一年免费的ssl的证书，首先我们进入官网首先然后在云产品中选择ssl证书到达如下界面：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018214354.png" alt="" /></p><p>然后我们点击左侧 <code>我的证书</code>一栏既可以看到当前我们已经拥有的证书，这里选择申请免费证书使用默认的亚洲诚信即可：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018214705.png" alt="" /></p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018214836.png" alt="" /></p><p>然后我们下一步后会获得一个txt记录类型记录需要添加到域名解析处，直接按照腾讯云推荐自动添加即可，添加完成后我们就会得到一条新的域名解析记录如下图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018215313.png" alt="" /></p><p>然后我们继续下一步等待5分钟后一般就审核通过了，然后会跳转到一个提供下载zip压缩包的页面，我们需要下载这个压缩包，里面有我们需要配置到nginx、tomcat或者Apache的内容，我们解压缩后只需要使用里面nginx文件夹下的内容，里面会有两个东西，一个是crt证书，另一个是key文件，我们使用拖拽的方法将两个文件放置到xftp连接的远程服务器文件目录中的 <code>/etc/ssl</code>下如下图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018215834.png" alt="" /></p><p>②然后我们需要再配置一下 <code>nginx.conf</code>文件，之前我们http使用的是80端口监听，而https一般是443，我们在 <code>nginx.conf</code>最下面再写一个新的server代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">server &#123;<br>#https使用443监听<br>        listen      443 ssl;<br>        #注意填写自己的二级域名<br>        server_name compile.coolchong.cn;<br><br>#下面两行的xxxx出改为自己的域名，值和server_name一样即可<br>         ssl_certificate /etc/ssl/1_xxxxx.crt;<br>        ssl_certificate_key /etc/ssl/2_xxxxx.key;<br>        ssl_session_cache shared:SSL:1m;<br>        ssl_session_timeout  10m;<br>        ssl_ciphers PROFILE=SYSTEM;<br>        ssl_prefer_server_ciphers on;<br>        location / &#123;<br>        #注意指向dist路径该改为自己的<br>            root    /home/compile;<br>            index   index.html;<br>        &#125;<br>     &#125;<br></code></pre></td></tr></table></figure><p>③然后我们在输入如下指令重新启动nginx服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#检查nginx配置是否正确<br>nginx -t<br>#重启nginx服务<br>systemctl restart nginx.service<br></code></pre></td></tr></table></figure><p>④重启成功后，我们在搜索引擎搜索栏中输入https开头的二级域名就可以安全解析到之前的项目了，并且此时浏览器会提示此页面安全了！</p><p><img src="https://langwenchong.gitee.io/figure-bed/20211018220319.png" alt="" /></p><h3 id="反思与总结"><a class="markdownIt-Anchor" href="#反思与总结"></a> 反思与总结</h3><p>在经过这次配置后总算是对服务器相关的nginx服务有了一定的了解了。这里给出我的一些理解，实际上server就是服务的意思，因此当我们需要使用nginx配置不同域名、不同端口时都需要重新新建一个server，server_name是匹配的域名，一般是可以匹配到的并且优先匹配优先使用这个server进行服务，但是当我们在nginx.conf中未找到dns中添加的域名记录时，那么会默认使用第一个或者是标记为默认的server进行解析。这也是为什么我的博客在nginx中没有添加 <code>www.coolchong.cn</code>的server也可以正确解析到博客的原因，因此我server_name为 <code>coolchong.cn</code>的server标记为了默认服务，因此当输入 <code>www.coolchong.cn</code>时dns解析发现有这条记录却并没未在nginx中找到对应匹配的服务就会抛给默认server进行服务因此解析到了 <code>wenchong.sapce</code>即博客地址了。同时这次我使用的是二级域名指向不同项目的方法来部署的，但是不同的项目实际上有三种不同的方法进行部署，这里我只使用了最常用的方法，另外两种可以参考这篇文章</p><div class="tag-plugin link dis-select"><a class="link-card plain" title="nginx部署多个项目" href="https://www.cnblogs.com/zhaoxxnbsp/p/12691398.html" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="icon"><div class="left"><span class="title">nginx部署多个项目</span><span class="cap link fs12">https://www.cnblogs.com/zhaoxxnbsp/p/12691398.html</span></div><div class="right"><div class="lazy img" data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.4/link/8f277b4ee0ecd.svg"></div></div></a></div><p>同时本篇博客的理解参考了如下文章，特此鸣谢：</p><div class="tag-plugin link dis-select"><a class="link-card plain" title="nginx心得" href="https://www.cnblogs.com/zhaoxxnbsp/p/12691398.html" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="icon"><div class="left"><span class="title">nginx心得</span><span class="cap link fs12">https://www.cnblogs.com/zhaoxxnbsp/p/12691398.html</span></div><div class="right"><div class="lazy img" data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.4/link/8f277b4ee0ecd.svg"></div></div></a></div><p>最后我想说，虽然第一次配置的过程异常痛苦，但是相比于日日夜夜进行crud操作，我认为大学生多勇于尝试探索新事物更加有意义！祝愿你我都能够坚守乐于学习的初衷，早日成为传说中的大牛！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;针对小白的快速前端vue项目打包部署教程，包含二级域名解析配置以及https认证等，还不赶快进来看看👀？&lt;/p&gt;</summary>
    
    
    
    <category term="开发技能" scheme="https://coolchong.cn/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="nginx" scheme="https://coolchong.cn/tags/nginx/"/>
    
    <category term="vue" scheme="https://coolchong.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>浅谈《SpringBoot》数据请求响应</title>
    <link href="https://coolchong.cn/2021/08/30/request/"/>
    <id>https://coolchong.cn/2021/08/30/request/</id>
    <published>2021-08-30T01:49:30.000Z</published>
    <updated>2023-01-29T04:20:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot入门笔记，本篇记录翀翀对数据请求响应的方法：RequestMapping,GetMapping和PostMapping的总结。</p><span id="more"></span><h3 id="快速创建项目"><a class="markdownIt-Anchor" href="#快速创建项目"></a> 快速创建项目</h3><p>这里我们使用<code>Spring Initializer</code>来快速创建一个项目，在选择应用场景依赖时我们选择如下三个即可：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830095406.png" alt="" /></p><p>由于我们的JDK版本是1.8因此需要将java编译配置更改为java 8,然后选择<code>Spring Web</code>、<code>JDBC API</code>和<code>MysqlDriver</code>(后两项依赖是我们通过jdbc方式连接和操作数据库时需要用到的，方便下一篇文章《SpringBoot》操作数据库的演示）:</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830095623.png" alt="" /></p><p>创建完成后我们就完成了一个SpringBoot的项目创建，其文件结构如下图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830095723.png" alt="" /></p><p>然后我们在<code>demo</code>下创建一个新的文件<code>controller\sqlController</code>，我们将在这里编写持久化服务函数方法来进行数据请求的相应。</p><div class="tag-plugin note" color="cyan"><div class="body"><p>我们一定要注意DemoApplication是起始函数，他将在同级和下一级的文件中进行方法的运行，因此我们的Controller层的方法必须建立在与DemoApplication同级包下，因此controller在demo包下。</p></div></div><p>然后我们在设置一下端口，由于前端vue项目的运行也是在8080端口上，为了避免端口冲突，我一般将SpringBoot项目的端口设置为8888，我们在<code>main/sources</code>下可以看见已经创建了一个<code>application.properties</code>文件了，他是用来存储项目配置的。但是我更青睐于使用格式更加优雅的<code>application.yml</code>进行配置，因此我们在<code>main/source</code>下创建yml文件，并且添上端口号：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br><span class="hljs-string">port:8888</span><br></code></pre></td></tr></table></figure><p>自此我们的项目就快速创建成功了。然后我们进行一个简单的测试，我们打开<code>sqlController</code>文件并编写以下函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hellosql</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello sql!&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>然后我们运行项目后打开网址<code>http://localhost:8888/hello</code>当页面中可以显示<code>hello sql</code>及说明项目配置成功：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830100834.png" alt="" /></p><h3 id="getmapping响应请求"><a class="markdownIt-Anchor" href="#getmapping响应请求"></a> GetMapping响应请求</h3><p>在SpringBoot中我们常用的一种响应请求的方法就是使用@GetMapping注解标记的方法。他有以下两种写法，但是无论哪种写法最终参数都会在路径url中显示：</p><h4 id="pathvarialble"><a class="markdownIt-Anchor" href="#pathvarialble"></a> @PathVarialble</h4><p>我们在<code>sqlController.java</code>中编写以下函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/query/&#123;name&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span>  String <span class="hljs-title function_">PrintName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name)</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good morning!&quot;</span>+name+<span class="hljs-string">&quot;~&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>假设我们现在要通过上面的这个方法上传参数name为chongchong，那么最终的url为<code>http:localhost:8888/query/chongchong</code>即我们直接在<code>/query/</code>的后面加上我们要写的参数即可，如下图是最终的测试结果：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830101641.png" alt="" /></p><p>上面的测试软件是PostMan,可以点击这里下载：</p><div class="tag-plugin link dis-select"><a class="link-card plain" title="PostMan下载" href="https://www.postman.com/downloads/" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="icon"><div class="left"><span class="title">PostMan下载</span><span class="cap link fs12">https://www.postman.com/downloads/</span></div><div class="right"><div class="lazy img" data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.4/link/8f277b4ee0ecd.svg"></div></div></a></div><p>我们要注意一下几点事项：</p><ol><li>当使用@GetMapping注解时，请一定要将请求头的方法使用Get请求而不是Post请求，否则会返还错误码405表示方法不正确</li><li>注解下方的函数名字没有特殊要求我们可以自己命名例如我这里命名为了PrintName</li><li>url中<code>/&#123;var&#125;</code>表示的是要填写的参数，而前面的<code>query</code>来标记此时调用该方法</li><li>参数中前必须使用@PathVariable来获取路径中填写的参数，其中注解后方括号内部的<code>name</code>必须与路径上的参数同名，但是后面的<code>String name</code>可以修改为其他参数名来方便方法内部使用，比如我们可以修改为<code> public  String PrintName(@PathVariable(&quot;name&quot;) String n)&#123;</code>此时内部的参数需要使用n来表示</li></ol><div class="tag-plugin note" color="cyan"><div class="body"><p>@PathVariable最大的特点就是每一个参数直接使用<code>/var/</code>的方式填写即可。并且要注意每次我们修改了controller的代码都需要重新运行SpringBoot项目！</p></div></div><h4 id="requestparam"><a class="markdownIt-Anchor" href="#requestparam"></a> @RequestParam</h4><p>使用这个注解的方法更加普遍，他支持不同形式的参数包括map,List，对象形式等。他的最大特点是请求路径url后面的参数使用<code>?var=value</code>的形式表示。</p><h5 id="获取基本类型参数"><a class="markdownIt-Anchor" href="#获取基本类型参数"></a> 获取基本类型参数</h5><p>我们使用@RequestParam的方法再重写一下上面的相应方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/query&quot;)</span><br>       <span class="hljs-keyword">public</span> String <span class="hljs-title function_">PrintName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String n)</span>&#123;<br>           <span class="hljs-keyword">return</span><span class="hljs-string">&quot;Good morning!&quot;</span>+n+<span class="hljs-string">&quot;~&quot;</span>;<br>       &#125;<br></code></pre></td></tr></table></figure><p>因此此时我们的请求url是<code>http://localhost:8888/query?name=chongchong</code>，测试结果如下图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830103315.png" alt="" /></p><p><strong>并且@RequestParam还可以使用defaultValue填写默认的参数值</strong>，此时如果后面我们并没有添加参数那么他将会使用默认值替代，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/query&quot;)</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">PrintName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;name&quot;,defaultValue = &quot;chongchong&quot;)</span> String n)</span>&#123;<br>            <span class="hljs-keyword">return</span><span class="hljs-string">&quot;Good morning!&quot;</span>+n+<span class="hljs-string">&quot;~&quot;</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p>此时我输入<code>http://localhost:8888/query</code>并没有添加参数值chongchong,但是他仍然会返还上面的那句话：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830103801.png" alt="" /></p><p><strong>同时@RequestParam还提供了<code>required=false</code>来设置参数为非必输项</strong>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/query&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">PrintName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;firstName&quot;, required = false)</span> String fn,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(value = &quot;lastName&quot;, required = true)</span> String ln</span><br><span class="hljs-params">   )</span> &#123;<br>       <span class="hljs-comment">//填写姓氏就加上，否则只输出名</span><br>       <span class="hljs-keyword">return</span> fn == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;Good morning!&quot;</span> + ln + <span class="hljs-string">&quot;~&quot;</span> : <span class="hljs-string">&quot;Good morning!&quot;</span> + fn + ln + <span class="hljs-string">&quot;~&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>我们现在只加上lastName参数为wenchong,FirstName不写，那么测试结果如下图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830104410.png" alt="" /></p><p>我们发现此时fistName不是必输项因此后台仍然给出了相应。但是我们要注意非必输项为填写时那么将被设置为空即null值，如下图我们打印出firstName的值：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830104639.png" alt="" /></p><div class="tag-plugin note" color="cyan"><div class="body"><p>为了避免出现此类现象，我们可以使用defaulValue来为其设置默认值</p></div></div><h5 id="使用map来接收参数"><a class="markdownIt-Anchor" href="#使用map来接收参数"></a> 使用map来接收参数</h5><p>我们还可以使用mao来接收一组参数，但是这个方法并没有简化输入url，我们在url中还是要输入所有的参数，只是在接收相应方法中我们不需要再枚举形参了，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/query&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">PrintName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String,Object&gt; args)</span> &#123;<br>        <span class="hljs-comment">//map接收了参数，用get声明参数名字</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good morning!&quot;</span> + args.get(<span class="hljs-string">&quot;firstName&quot;</span>) + args.get(<span class="hljs-string">&quot;lastName&quot;</span>) + <span class="hljs-string">&quot;~&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>此时我们输入的url还是<code>http://localhost:8888/query/?firstName=Lang&amp;lastName=wenchong</code>,并没有变短，但是此时方法中的参数声明就要简化了许多，当涉及到多个参数时使用此方法效果极佳。此时我们的测试结果如下图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830105325.png" alt="" /></p><h6 id="思考map泛型为什么是string-object类型"><a class="markdownIt-Anchor" href="#思考map泛型为什么是string-object类型"></a> 思考：Map泛型为什么是String-Object类型？</h6><p>我们要注意参数的形式是key-value键值对，其中前面部分是形参名称必定是字符串的，但是后面传递的值可能是int,long,String等类型，因此我们需要使用一个更大的父类形式Object来统一表示。</p><p>同样的我们还可以使用List或者Array进行接收但是不常用，因为写法很不友好并且接收的是同类型参数，这里仅给出测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//使用数组接收</span><br> <span class="hljs-meta">@GetMapping(&quot;/query&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">PrintName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String[] args)</span> &#123;<br>        <span class="hljs-comment">//参数顺序、数组大小都要给定</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good morning!&quot;</span> + args[<span class="hljs-number">0</span>] + args[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;~&quot;</span>;<br>    &#125;<br><span class="hljs-comment">//使用List接收</span><br><span class="hljs-meta">@GetMapping(&quot;/query&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">PrintName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> List&lt;Object&gt; args)</span> &#123;<br>        <span class="hljs-comment">//参数顺序、List大小都要给定</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good morning!&quot;</span> + args.get(<span class="hljs-number">0</span>) + args.get(<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;~&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="使用对象来接收参数"><a class="markdownIt-Anchor" href="#使用对象来接收参数"></a> 使用对象来接收参数</h5><p>这个方法也常用，他通常用来处理某些具有特殊特殊身份的参数集合使用，如下是一个案例，我们假设要设定chongchong去新华书店购买图书，书名叫做《SpringBoot入门到入土》并且标价20元，此时如果我们要按照基本类型参数一个一个传递，很显然非常的复杂，并且关系不明确，此时我们可以事先定义两个具有特殊关系的对象来分别接收如下：</p><p>首先我们需要在<code>demo</code>下新建一个包<code>sqlObject</code>然后分别在下面建立两个实体类，分别是User和Book：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//sqlObject.User.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String location;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLocation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> location;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLocation</span><span class="hljs-params">(String location)</span> &#123;<br>        <span class="hljs-built_in">this</span>.location = location;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//sqlObject.Book.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String bookname;<br>    <span class="hljs-keyword">private</span> Integer price;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBookname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bookname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookname</span><span class="hljs-params">(String bookname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookname = bookname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(Integer price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们再在sqlController中加入以下相应方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/buy&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">BuyBook</span><span class="hljs-params">(User user, Book book)</span>&#123;<br>        <span class="hljs-keyword">return</span> user.getUsername()+<span class="hljs-string">&quot; go to &quot;</span>+user.getLocation()+<span class="hljs-string">&quot; to buy a book called &quot;</span>+ book.getBookname()+<span class="hljs-string">&quot; for ￥ &quot;</span>+book.getPrice();<br>    &#125;<br></code></pre></td></tr></table></figure><p>测试结果如图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830112411.png" alt="" /></p><div class="tag-plugin note" color="cyan"><div class="body"><p>注意我们在填写参数时必须按照先填写完obj1的所有成员参数再填写obj2所有成员参数的顺序填写，因此SptingBoot不会去自动识别那个参数属于哪一个类，同时为了避免某个成员参数二次赋值，需要保证两个不用类的参数名称不同。如上图User使用的是username,Book使用的是bookname，当他们同时使用name时那么传参时就会出现name二次赋值的现象。</p></div></div><h6 id="bug问题二次赋值现象"><a class="markdownIt-Anchor" href="#bug问题二次赋值现象"></a> BUG问题：二次赋值现象？</h6><p>如下图就是一个二次赋值的现象，假设此时我们要求User必须使用name指定人名，Book也必须使用name指定书名，那么我们的对象定义就改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//sqlObject.User.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br><br>    <span class="hljs-keyword">private</span> String location;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLocation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> location;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLocation</span><span class="hljs-params">(String location)</span> &#123;<br>        <span class="hljs-built_in">this</span>.location = location;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//sqlObject.Book.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer price;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(Integer price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>controller层响应方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/buy&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">BuyBook</span><span class="hljs-params">(User user, Book book)</span>&#123;<br>        <span class="hljs-keyword">return</span> user.getName()+<span class="hljs-string">&quot; go to &quot;</span>+user.getLocation()+<span class="hljs-string">&quot; to buy a book called &quot;</span>+ book.getName()+<span class="hljs-string">&quot; for ￥ &quot;</span>+book.getPrice();<br>    &#125;<br></code></pre></td></tr></table></figure><p>此时我们进行测试，最终结果如下了二次赋值的现象：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830114644.png" alt="" /></p><h6 id="思考有没有什么更好的方法解决上面的不同类对象同名成员属性参数的区分"><a class="markdownIt-Anchor" href="#思考有没有什么更好的方法解决上面的不同类对象同名成员属性参数的区分"></a> 思考：有没有什么更好的方法解决上面的不同类对象同名成员属性参数的区分？</h6><p>我们虽然可以使用不同的参数来避免二次赋值，但是当面临多个类时很显然上面的方法并不合适，比如有多个类他们都会有同名属性比如id,name等，那么难道每次我们都要绞尽脑汁给他们改成不同的名字吗？没有必要，我们可以使用<code>@InitBinder</code>指定前缀绑定来解决问题。</p><h5 id="initbinder应用"><a class="markdownIt-Anchor" href="#initbinder应用"></a> @InitBinder应用</h5><p>我们使用@InitBinder注解来解决User和Book添加了相同的属性name的赋值问题，此时我们在controller层加入以下响应请求方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@InitBinder(&quot;u&quot;)</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBinderU</span><span class="hljs-params">(WebDataBinder binder)</span>&#123;<br>       <span class="hljs-comment">//要求用@InitBinder(&quot;u&quot;)绑定的对象属性参数加上前缀u.</span><br>       binder.setFieldDefaultPrefix(<span class="hljs-string">&quot;u.&quot;</span>);<br>   &#125;<br>   <span class="hljs-meta">@InitBinder(&quot;b&quot;)</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBinderB</span><span class="hljs-params">(WebDataBinder binder)</span>&#123;<br>       <span class="hljs-comment">//要求用@InitBinder(&quot;b&quot;)绑定的对象属性参数加上前缀b.</span><br>       binder.setFieldDefaultPrefix(<span class="hljs-string">&quot;b.&quot;</span>);<br>   &#125;<br>   <span class="hljs-meta">@GetMapping(&quot;/buy&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">BuyBook</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute(&quot;u&quot;)</span> User user,<span class="hljs-meta">@ModelAttribute(&quot;b&quot;)</span> Book book)</span>&#123;<br>       <span class="hljs-keyword">return</span> user.getName()+<span class="hljs-string">&quot; go to &quot;</span>+user.getLocation()+<span class="hljs-string">&quot; to buy a book called &quot;</span>+ book.getName()+<span class="hljs-string">&quot; for ￥ &quot;</span>+book.getPrice();<br>   &#125;<br></code></pre></td></tr></table></figure><p>此时我们在输入参数时就要求需要加上前缀了，这就有点类似于sql语句中的前缀，如下图是测试图：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830114207.png" alt="" /></p><p>这样我们通过添加前缀的方式就完美解决了不同类相同属性参数的传值问题。</p><h4 id="pathvariable和requestparam混用"><a class="markdownIt-Anchor" href="#pathvariable和requestparam混用"></a> @PathVariable和@RequestParam混用</h4><p>实际上我们甚至可以混用两种注解，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/hello/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hellosql</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello！ &quot;</span>+id+<span class="hljs-string">&quot;号：&quot;</span>+name;<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://langwenchong.gitee.io/figure-bed/20210830124347.png" alt="" /></p><h3 id="postmapping响应请求"><a class="markdownIt-Anchor" href="#postmapping响应请求"></a> PostMapping响应请求</h3><p>在学习完GetMapping后我们已经可以完成少量参数时的数据请求了，但是我们发现此时有几个弊端：</p><ol><li>url中暴露隐私信息</li><li>当涉及多个参数时，即使使用对象作为参数写起来也非常的复杂</li></ol><p>我们发现之所以出现如上的问题是因为我们总是在基于基础类型变量进行传值，即使是使用了对象也仅仅是在controller层进行了参数接收的简化，但是在传值时还是在一个属性一个属性的传递，因此会出现多参数时url复杂并且暴露隐私信息的问题。那么我们通过PostMapping就可以解决上面的问题，他的特点是将所有的变量封装在一个对象中，然后将对象传递，也就是说对象好像一个盒子，里面盛放了许多信息，这样我们在传递时就不用在url中逐一枚举所有变量了，而是直接上传对象了。</p><h4 id="基本接收方法"><a class="markdownIt-Anchor" href="#基本接收方法"></a> 基本接收方法</h4><p>我们以下图为了讲解一下最简单的PostMapping实现，我们在controller层加入以下函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/query&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">PringtName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good afternoon!&quot;</span> + name + <span class="hljs-string">&quot;~&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后在postman中进行测试，我们需要注意因为此时我们不是在传递基础变量参数了，而是在传递一个对象，因此我们需要在<code>body/for-data</code>进行中填写键值对：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830115821.png" alt="" /></p><p>这就类似于我们传递了一个<code>&#123;name:&quot;chongchong&quot;&#125;</code>对象，并且要注意方法使用post形式，此时我们就可以正确得到相应了，并且我们观察此时的url并未携带我们的name信息，隐私信息得到了保障。</p><div class="tag-plugin note" ><div class="title">info</div><div class="body"><p>同样的，postMapping也有defaultValue和required=false设置默认项和非必输项等属性，请自行尝试。</p></div></div><h4 id="使用map传递"><a class="markdownIt-Anchor" href="#使用map传递"></a> 使用Map传递</h4><p>PostMapping和GetMapping仅仅是在url形式和传输的数据形式上有所区别，最终实现的效果是一致的，因此PostMapping也有用Map传递参数的方法，只是要注意在测试时我们需要在<code>body/form-data</code>中进行信息填写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/query&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">PrintName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String,Object&gt; args)</span> &#123;<br>       <span class="hljs-comment">//map接收了参数，用get声明参数名字</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good afternoon!&quot;</span> + args.get(<span class="hljs-string">&quot;firstName&quot;</span>) + args.get(<span class="hljs-string">&quot;lastName&quot;</span>) + <span class="hljs-string">&quot;~&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://langwenchong.gitee.io/figure-bed/20210830120559.png" alt="" /></p><p>同理，PostMapping中也有使用数组，List传递参数的方法。</p><h4 id="使用json数据传输"><a class="markdownIt-Anchor" href="#使用json数据传输"></a> 使用Json数据传输</h4><p>这是PostMapping中最大的特点，他可以使用json数据形式来传递数据，这样我们只需在前端中创建多个键值对对象就可以直接交付到后端完成多对象的传值，我们只需要在对象参数前面加上@RequestBody即可，如下图我们还是来实现买书：</p><p>首先我们定义BuyBook类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BuyBook</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String location;<br>    <span class="hljs-keyword">private</span> String bookname;<br>    <span class="hljs-keyword">private</span> String price;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLocation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> location;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLocation</span><span class="hljs-params">(String location)</span> &#123;<br>        <span class="hljs-built_in">this</span>.location = location;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBookname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bookname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookname</span><span class="hljs-params">(String bookname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookname = bookname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(String price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后在Controller层加入如下相应函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/buy&quot;)</span><br><span class="hljs-comment">//只能是一个接收类</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">BuyBook</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> BuyBook bb)</span> &#123;<br>       <span class="hljs-keyword">return</span> bb.getUsername() + <span class="hljs-string">&quot; go to &quot;</span> + bb.getLocation() + <span class="hljs-string">&quot; to buy a book called &quot;</span> + bb.getBookname() + <span class="hljs-string">&quot; for ￥ &quot;</span> + bb.getPrice();<br>   &#125;<br></code></pre></td></tr></table></figure><p>这样我们在测试时使用postman并且改为<code>body/raw/json</code>格式加入键值对即可：</p><p><img src="https://langwenchong.gitee.io/figure-bed/20210830122801.png" alt="" /></p><p>这样我们就轻松完成了买书的各种参数的传递。</p><h3 id="requestmapping"><a class="markdownIt-Anchor" href="#requestmapping"></a> RequestMapping</h3><p>实际上我们前面所学到的GetMapping，PostMapping都是RequestMapping的子类，因此我们可以统一使用RequestMapping来代替前两者。其对应关系为：</p><table><thead><tr><th style="text-align:center">@RequestMapping</th><th style="text-align:center">@GetMapping&amp;@PostMapping</th></tr></thead><tbody><tr><td style="text-align:center">@RequestMapping(path = “path”, method=RequestMethod.GET)</td><td style="text-align:center">@GetMapping(path=“path”)</td></tr><tr><td style="text-align:center">@RequestMapping(path = “path”, method=RequestMethod.POST)</td><td style="text-align:center">@PostMapping(path=“path”)</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;SpringBoot入门笔记，本篇记录翀翀对数据请求响应的方法：RequestMapping,GetMapping和PostMapping的总结。&lt;/p&gt;</summary>
    
    
    
    <category term="开发技能" scheme="https://coolchong.cn/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="java" scheme="https://coolchong.cn/tags/java/"/>
    
    <category term="http request" scheme="https://coolchong.cn/tags/http-request/"/>
    
  </entry>
  
  <entry>
    <title>序言--博客再起航寄语</title>
    <link href="https://coolchong.cn/2020/10/21/hello-world/"/>
    <id>https://coolchong.cn/2020/10/21/hello-world/</id>
    <published>2020-10-20T16:00:00.000Z</published>
    <updated>2023-01-29T04:11:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>hi👋~，看这里，博主在这里发表了重要的讲话！还不来看一看😊?</p><span id="more"></span><h3 id="再起航"><a class="markdownIt-Anchor" href="#再起航"></a> 再起航</h3><p>距离第一天建站已经过去700多天了，时光如白驹过隙般飞逝，最近一年中由于考研、备赛等各种原因造成了一段时间的停更，幸好最终长时间的努力没有辜负取得了较为满意的结果，如今不忘初心决定继续运营维护博客。</p><p>数十月的博客运营经历，也让我萌生了重新建站的想法，一来是hexo静态博客操作复杂，不易于随时随地进行维护更新，二来伴随着文章数量的递增，我深感生活随想与学习笔记专栏分开的必要性，同时volantis主题虽然具备丰富的个性化选项，但是stellar主题的内置wiki功能更加强大，能够有助于我高效的进行文档整理，因此在本次更新中我采用了typecho cuteen主题记录生活随想与hexo stellar主题存放学习笔记，分别绑定二级域名的策略进行搭建。因此您可以在这里进行博客专栏的跳转：</p><ul><li>个人主页： <a href="https://coolchong.cn">https://coolchong.cn</a></li><li>生活随想： <a href="https://blog.coolchong.cn">https://blog.coolchong.cn</a></li><li>学习笔记： <a href="https://scholar.coolchong.cn">https://scholar.coolchong.cn</a></li></ul><h3 id="起航"><a class="markdownIt-Anchor" href="#起航"></a> 起航</h3><p>200天前，翀翀的小站正式诞生在HEXO大陆。</p><p>伴随着大二整整一学年的学习时光，我对博客的开发逐渐熟练同时博客也在魔改下变得愈发美丽，从起初的next主题到如今的volantis主题，从起初的一两篇文章到如今400k+的学习笔记内容，从起初的原始裸域到如今绑定自己的特有域名甚至到现在运行在自己的服务器上…我想一年的博客开发经历既充实了我的大学生活，让每一天充满了开发与维护博客的乐趣，同时又见证了我的成长，每每回看自己的博客文章，我总是能够回忆起坚持日更笔记的那些日子，虽然枯燥却充满了意义✒️。</p><p>一年的博客生涯，我结交了许多小伙伴，同时见证了许多充满意义的时刻。首先当然就是狂推我的小伙伴–Mr.拆加入了hexo博客大陆🤣（在这里为他打个小广告👉<a href="https://cheeseburgerim.space/">Cheeseburgerim’s blog</a>)。同时加入到了volantis社区大家庭，认识了许多技术大佬，在他们的帮助下得以成功DIY自己的博客并在社区展示🍻。同时还认识了博友–HermitLSR(一个铁憨憨，也为他打个广告👉<a href="https://www.hermitlsr.top/">HermitLSR‘s blog</a>)，和他交流博客开发的技术，学习到了许多新知识。同时还在大佬的友链中发现了自己的同专业校友😆–SuperPung，只能说缘分妙不可言呀！</p><h3 id="结尾语"><a class="markdownIt-Anchor" href="#结尾语"></a> 结尾语</h3><p>未来的日子中，我希望自己可以坚持维护更新博客，勤更文章，不忘初心！</p><p>雨中的博客于今日起重生再起航🚢…</p><p>最后分享一句话给未来的自己😁每一个优秀的人，都有一段沉默的时光。那一段时光，是付出了很多努力，忍受了很多的孤独和寂寞，不抱怨不诉苦，只有自己知道。而当日后说起时，连自己都能被感动的日子。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;hi👋~，看这里，博主在这里发表了重要的讲话！还不来看一看😊?&lt;/p&gt;</summary>
    
    
    
    <category term="简介" scheme="https://coolchong.cn/categories/%E7%AE%80%E4%BB%8B/"/>
    
    
    <category term="简介" scheme="https://coolchong.cn/tags/%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
</feed>
